<html>
<head><title>
HDF5/H5L API Specification
</title>
<link href="../ed_styles/RMelect.css" rel="stylesheet" type="text/css">
</head>

<body bgcolor="#FFFFFF">

<!-- #BeginLibraryItem "/ed_libs/styles_RM.lbi" -->
<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://www.hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have      *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->
<!-- #EndLibraryItem --><!-- HEADER RIGHT " " -->


<!-- #BeginLibraryItem "/ed_libs/NavBar_RM.lbi" -->
<hr>
<center>
<table border=0 width=98%>
<tr><td valign=top align=left>
<a href="../index.html">HDF5 documents and links</a>&nbsp;<br>
<a href="../H5.intro.html">Introduction to HDF5</a>&nbsp;<br>
<a href="../UG/HDF5_Users_Guide-Responsive HTML5/index.html">HDF5 User&rsquo;s Guide</a>&nbsp;<br>
<!--
<a href="Glossary.html">Glossary</a><br>
-->
</td>
<td valign=top align=right>
In the 
<a href="RM_H5Front.html">HDF5 Reference Manual</a>&nbsp;
<font size=-1>
<br>
<a href="../HL/RM_H5DS.html">H5DS</a>&nbsp;&nbsp;
<a href="../HL/RM_H5IM.html">H5IM</a>&nbsp;&nbsp;
<a href="../HL/RM_H5LT.html">H5LT</a>&nbsp;&nbsp;
<a href="../HL/RM_H5PT.html">H5PT</a>&nbsp;&nbsp;
<a href="../HL/RM_H5TB.html">H5TB</a>&nbsp;
<a href="../HL/RM_HDF5Optimized.html">Optimized</a>&nbsp;
<br>
<a href="RM_H5.html">H5</a>&nbsp;&nbsp;
<a href="RM_H5A.html">H5A</a>&nbsp;&nbsp;
<a href="RM_H5D.html">H5D</a>&nbsp;&nbsp;
<a href="RM_H5E.html">H5E</a>&nbsp;&nbsp;
<a href="RM_H5F.html">H5F</a>&nbsp;&nbsp;
<a href="RM_H5G.html">H5G</a>&nbsp;&nbsp;
<a href="RM_H5I.html">H5I</a>&nbsp;&nbsp;
<a href="RM_H5L.html">H5L</a>&nbsp;
<br>
<a href="RM_H5O.html">H5O</a>&nbsp;&nbsp;
<a href="RM_H5P.html">H5P</a>&nbsp;&nbsp;
<a href="RM_H5PL.html">H5PL</a>&nbsp;&nbsp;
<a href="RM_H5R.html">H5R</a>&nbsp;&nbsp;
<a href="RM_H5S.html">H5S</a>&nbsp;&nbsp;
<a href="RM_H5T.html">H5T</a>&nbsp;&nbsp;
<a href="RM_H5Z.html">H5Z</a>&nbsp;
<br>
<a href="Tools.html">Tools</a>&nbsp;&nbsp;
<a href="PredefDTypes.html">Datatypes</a>&nbsp;&nbsp;
<a href="../fortran/index.html">Fortran</a>&nbsp;&nbsp;
<a href="APICompatMacros.html">Compatibility Macros</a>&nbsp;
<br>
<a href="CollectiveCalls.html">Collective Calls in Parallel</a>&nbsp;
<!--
<br>
<i><font size=-1>(Printable <a href="http://hdfgroup.org/HDF5/doc/PSandPDF/HDF5_RefManual.PDF">PDF</a> of this Reference Manual)</font></i>&nbsp;
-->
</font>
</td></tr>
</table>
</center>
<hr>
<!-- #EndLibraryItem --><center>
<h1>H5L: Link Interface</h1>
</center>

<h2>Link API Functions</h2>

The Link interface, H5L, functions create and manipulate links
in an HDF5 group.
This interface includes functions that enable the creation and use of 
user-defined link classes.
<p>
<strong>The C Interfaces:</strong>

<table border=0>
<tr><td valign=top>
<ul>
    <li><a href="#Link-CreateHard">H5Lcreate_hard</a>
    <li><a href="#Link-CreateSoft">H5Lcreate_soft</a>
    <li><a href="#Link-CreateExternal">H5Lcreate_external</a>
    <li><a href="#Link-Exists">H5Lexists</a> 
    <li><a href="#Link-Move">H5Lmove</a>
    <li><a href="#Link-Copy">H5Lcopy</a>
    <li><a href="#Link-Delete">H5Ldelete</a> 
</ul>
</td><td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td valign=top> 
<ul>
    <li><a href="#Link-GetInfo">H5Lget_info</a>
    <li><a href="#Link-GetVal">H5Lget_val</a>
    <li><a href="#Link-UnpackELinkVal">H5Lunpack_elink_val</a>
    <br>&nbsp;
    <li><a href="#Link-CreateUD">H5Lcreate_ud</a>
    <li><a href="#Link-Register">H5Lregister</a> 
    <li><a href="#Link-Unregister">H5Lunregister</a> 
    <li><a href="#Link-IsRegistered">H5Lis_registered</a> 
</ul>
</td><td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td valign=top>
<ul>
    <li><a href="#Link-Iterate">H5Literate</a>
    <li><a href="#Link-IterateByName">H5Literate_by_name</a>
    <li><a href="#Link-Visit">H5Lvisit</a>
    <li><a href="#Link-VisitByName">H5Lvisit_by_name</a>
    <li><a href="#Link-GetInfoByIdx">H5Lget_info_by_idx</a>
    <li><a href="#Link-GetNameByIdx">H5Lget_name_by_idx</a>
    <li><a href="#Link-GetValByIdx">H5Lget_val_by_idx</a>
    <li><a href="#Link-DeleteByIdx">H5Ldelete_by_idx</a>
</ul>
</td></tr>
</table>

<i>Alphabetical Listing</i>



<table border="0">
  <tr>
    <td valign="top">
      <ul>
        <li><a href="#Link-Copy">H5Lcopy</a>
        <li><a href="#Link-CreateExternal">H5Lcreate_external</a>
        <li><a href="#Link-CreateHard">H5Lcreate_hard</a>
        <li><a href="#Link-CreateSoft">H5Lcreate_soft</a>
        <li><a href="#Link-CreateUD">H5Lcreate_ud</a>
        <li><a href="#Link-Delete">H5Ldelete</a> 
        <li><a href="#Link-DeleteByIdx">H5Ldelete_by_idx</a>
        <li><a href="#Link-Exists">H5Lexists</a> 
      </ul>     
    </td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td valign="top">
      <ul>
        <li><a href="#Link-GetInfo">H5Lget_info</a>
        <li><a href="#Link-GetInfoByIdx">H5Lget_info_by_idx</a>
        <li><a href="#Link-GetNameByIdx">H5Lget_name_by_idx</a>
        <li><a href="#Link-GetVal">H5Lget_val</a>
        <li><a href="#Link-GetValByIdx">H5Lget_val_by_idx</a>
        <li><a href="#Link-IsRegistered">H5Lis_registered</a> 
        <li><a href="#Link-Iterate">H5Literate</a>
        <li><a href="#Link-IterateByName">H5Literate_by_name</a>
      </ul>
    </td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td valign="top">
      <ul>
        <li><a href="#Link-Move">H5Lmove</a>
        <li><a href="#Link-Register">H5Lregister</a> 
        <li><a href="#Link-UnpackELinkVal">H5Lunpack_elink_val</a>
        <li><a href="#Link-Unregister">H5Lunregister</a> 
        <li><a href="#Link-Visit">H5Lvisit</a>
        <li><a href="#Link-VisitByName">H5Lvisit_by_name</a>
      </ul>
    </td>
  </tr>
</table>

<br>
<strong>The Fortran Interface:</strong>
<br>
In general, each Fortran subroutine performs exactly the same task 
as the corresponding C function.  
<br>
<table border="0">
  <tr>
    <td valign="top">
      <ul>
        <li><a href="#Link-Copy">h5lcopy_f</a>
        <li><a href="#Link-CreateExternal">h5lcreate_external_f</a>
        <li><a href="#Link-CreateHard">h5lcreate_hard_f</a>
        <li><a href="#Link-CreateSoft">h5lcreate_soft_f</a> 
        <!-- <li><a href="#Link-CreateUD">h5lcreate_ud_f</a> -->
      </ul>     
    </td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td valign="top">
      <ul>
        <li><a href="#Link-Delete">h5ldelete_f</a>
        <li><a href="#Link-DeleteByIdx">h5ldelete_by_idx_f</a>
        <li><a href="#Link-Exists">h5lexists_f</a> 
        <li><a href="#Link-GetInfo">h5lget_info_f</a>
        <li><a href="#Link-GetInfoByIdx">h5lget_info_by_idx_f</a>
      </ul>
    </td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td valign="top">
      <ul>
        <li><a href="#Link-GetNameByIdx">h5lget_name_by_idx_f</a>
        <!-- <li><a href="#Link-GetVal">h5lget_val_f</a> -->
        <!-- <li><a href="#Link-GetValByIdx">h5lget_val_by_idx_f</a> -->
        <li><a href="#Link-IsRegistered">h5lis_registered_f</a> 
        <li><a href="#Link-Iterate">h5literate_f</a>
        <li><a href="#Link-IterateByName">h5literate_by_name_f</a> 
        <li><a href="#Link-Move">h5lmove_f</a>
        <!-- <li><a href="#Link-Register">h5lregister_f</a> -->
        <!-- <li><a href="#Link-UnpackELinkVal">h5lunpack_elink_val_f</a> -->
        <!-- <li><a href="#Link-Unregister">h5lunregister_f</a>  -->
        <!-- <li><a href="#Link-Visit">h5lvisit_f</a> -->
        <!-- <li><a href="#Link-VisitByName">h5lvisit_by_name_f</a> -->
      </ul>
    </td>
  </tr>
</table>

<p>

<p>


<!-- NEW PAGE -->
<!-- HEADER RIGHT " " -->



<!--  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  -->
<!--       Include special topic files                       -->
<!--  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  -->


<!--  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  -->
<!--       Include function files                            -->
<!--  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  -->



<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Lcopy" -->
<hr>
<dl>

  <dt><div align=right><font color=999999 size=-1><i>
    Last modified: 26 July 2011
    </i></font></div>

  <dt><strong>Name:</strong> <a name="Link-Copy">H5Lcopy</a>
  <dt><strong>Signature:</strong>
    <dd><em>herr_t </em><code>H5Lcopy</code>(
            <em>hid_t </em><code>src_loc_id</code>,
            <em>const char *</em><code>src_name</code>,
            <em>hid_t </em><code>dest_loc_id</code>,
            <em>const char *</em><code>dest_name</code>,
            <em>hid_t </em><code>lcpl_id</code>,
            <em>hid_t </em><code>lapl_id</code>
        )
  <p></p>
  <dt><strong>Purpose:</strong>
    <dd>Copies a link from one location to another.
  <p></p>
  <dt><strong>Description:</strong>
    <dd><code>H5Lcopy</code> copies the link 
      specified by <code>src_name</code> 
      from the file or group specified by <code>src_loc_id</code> 
      to the file or group specified by <code>dest_loc_id</code>.
      The new copy of the link is created with the name <code>dest_name</code>. 
      <p>
      If <code>dest_loc_id</code> is a file identifier, 
      <code>dest_name</code> will be interpreted relative to 
      that file&rsquo;s root group.
      <p>
      The new link is created with the creation and access property lists 
      specified by <code>lcpl_id</code> and <code>lapl_id</code>.
      The interpretation of <code>lcpl_id</code> is limited in the manner
      described in the next paragraph.
      <p>
      <code>H5Lcopy</code> retains the creation time and the target of 
      the original link.
      However, since the link may be renamed, the character encoding 
      is that specified in <code>lcpl_id</code> rather than that of 
      the original link.  Other link creation properties are ignored.
      <p>
      If the link is a soft link, also known as a symbolic link, its 
      target is interpreted relative to the location of the copy.
      <p>
      Several properties are available to govern the behavior of 
      <code>H5Lcopy</code>.
      These properties are set in the link creation and access property lists, 
      <code>lcpl_id</code> and <code>lapl_id</code>, respectively.
      The property controlling creation of missing intermediate groups 
      is set in the link creation property list with 
      <a href="RM_H5P.html#Property-SetCreateIntermediateGroup">
          <code>H5Pset_create_intermediate_group</code></a>; 
      this function ignores any other properties in the link creation 
      property list.
      Properties controlling character encoding, link traversals, and
      external link prefixes are set in the link access property list with 
      <a href="RM_H5P.html#Property-SetCharEncoding">
          <code>H5Pset_char_encoding</code></a>,
      <a href="RM_H5P.html#Property-SetNLinks">
          <code>H5Pset_nlinks</code></a>, and
      <a href="RM_H5P.html#Property-SetELinkPrefix">
          <code>H5Pset_elink_prefix</code></a>.
      <p>
      <code>H5Lcopy</code> does not affect the object that the link points to.
      <p>
      <code>H5Lcopy</code> cannot copy hard links across files as a hard link
      is not valid without a target object; 
      to copy objects from one file to another, see
      <a href="RM_H5O.html#Object-Copy"><code>H5Ocopy</code></a>. 
      
  </p>
  <dt><strong>Parameters:</strong>
    <dd><table>
      <tr>
        <td valign="top"><em>hid_t </em><code>src_loc_id</code>
        </td>
        <td valign="top">IN: Location identifier of the source link
        </td></tr>
      <tr>
        <td valign="top"><em>const char *</em><code>src_name</code>
        </td>
        <td valign="top">IN: Name of the link to be copied
        </td></tr>
      <tr>
        <td valign="top"><em>hid_t </em><code>dest_loc_id</code>
        </td>
        <td valign="top">IN: Location identifier specifying the 
            destination of the  copy
        </td></tr>
      <tr>
        <td valign="top"><em>const&nbsp;char&nbsp;*</em><code>dest_name&nbsp;&nbsp;&nbsp;&nbsp;</code>
        </td>
        <td valign="top">IN: Name to be assigned to the new copy
        </td></tr>
      <tr>
        <td valign="top"><em>hid_t </em><code>lcpl_id</code>
        </td>
        <td valign="top">IN: Link creation property list identifier
        </td></tr>
      <tr>
        <td valign="top"><em>hid_t </em><code>lapl_id</code>
        </td>
        <td valign="top">IN: Link access property list identifier
        </td></tr>
    </table>
  <p>
  <dt><strong>Returns:</strong>
    <dd>Returns a non-negative value if successful;
        otherwise returns a negative value.
<!-- NEW PAGE -->
  <p></p>
  <dt><strong>Fortran90 Interface:</strong> h5lcopy_f
    <dd>
    <pre>
SUBROUTINE h5lcopy_f(src_loc_id, src_name, dest_loc_id, dest_name, hdferr, &
                     lcpl_id, lapl_id)
  IMPLICIT NONE
  INTEGER(HID_T), INTENT(IN) :: src_loc_id 
                                   ! Location identifier of the source link
  CHARACTER(LEN=*), INTENT(IN) :: src_name   
                                   ! Name of the link to be copied
  INTEGER(HID_T), INTENT(IN) :: dest_loc_id 
                                   ! Location identifier specifying the 
                                   ! destination of the copy
  CHARACTER(LEN=*), INTENT(IN) :: dest_name 
                                   ! Name to be assigned to the new copy
  INTEGER, INTENT(OUT) :: hdferr   ! Error code: 
                                   ! 0 on success and -1 on failure
  INTEGER(HID_T), OPTIONAL, INTENT(IN) :: lcpl_id 
                                   ! Link creation property list identifier
  INTEGER(HID_T), OPTIONAL, INTENT(IN) :: lapl_id 
                                   ! Link access property list identifier
END SUBROUTINE h5lcopy_f
    </pre>

<p></p>
<dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>C</strong></td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">
            Function introduced in this release.</td></tr>
    </table>
</dl>




<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Lcreate_external" -->
<hr>
<dl>
  <dt><div align=right><font color=999999 size=-1><i>
      Last modified: 18 June 2013
      </i></font></div>

  <dt><strong>Name:</strong> <a name="Link-CreateExternal">H5Lcreate_external</a> 
  <dt><strong>Signature:</strong>
    
  <dd><em>herr_t</em> <code>H5Lcreate_external</code>(
      <em>const char *</em><code>target_file_name</code>,
      <em>const char *</em><code>target_obj_name</code>,
      <em>hid_t</em> <code>link_loc_id</code>, 
      <em>const char *</em><code>link_name</code>,
      <em>hid_t</em> <code>lcpl_id</code>, 
      <em>hid_t</em> <code>lapl_id</code> 
      ) 

  <p></p>
  <dt><strong>Purpose:</strong>
    <dd>Creates an external link, a soft link to an object in a different file.

  <p></p>
  <dt><strong>Description:</strong>  
    <dd><code>H5Lcreate_external</code> creates a new external link.
      An external link is a soft link to an object in a different HDF5 file
      from the location of the link, i.e., to an external object.
      <p>
      <code>target_file_name</code> identifies the target file containing the 
      target object;
      <code>target_obj_name</code> specifies the path of the target object
      within that file.
      <code>target_obj_name</code> must be an absolute pathname in 
      <code>target_file_name</code>, i.e., it must start at the target 
      file&rsquo;s root group, but it is not interpreted until an application 
      attempts to traverse it. 
      <p>
      <code>link_loc_id</code> and <code>link_name</code> specify the 
      location and name, respectively, of the new link.
      <code>link_name</code> is interpreted relative to 
      <code>link_loc_id</code> 
      <p>
      <code>lcpl_id</code> is the link creation property list used in creating 
      the new link.
      <p> 
      <code>lapl_id</code> is the link access property list used in traversing 
      the new link.
      Note that an external file opened by the traversal of an external link 
      is always opened with the weak file close degree property setting, 
      <code>H5F_CLOSE_WEAK</code> (see
      <a href="RM_H5P.html#Property-SetFcloseDegree"><code>H5Pset_fclose_degree</code></a>); 
      any file close degree property setting in <code>lapl_id</code>
      is ignored.
      <p> 
      An external link behaves similarly to a soft link, and like
      a soft link in an HDF5 file, it may <i>dangle</i>: the target file
      and object need not exist at the time that the external link is created.
      <p>
      When the external link <code>link_name</code> is accessed,
      the library will search for the target file <code>target_file_name</code> 
      as described below:
      <ul>
          <li>If <code>target_file_name</code> is a relative pathname, the 
              following steps are performed:
	      <ul>
	          <li>The library will get the prefix(es) set in the 
                      environment variable <code>HDF5_EXT_PREFIX</code> and 
                      will try to prepend each prefix to 
                      <code>target_file_name</code> 
                      to form a new <code>target_file_name</code>.
	          <li>If the new <code>target_file_name</code> does not exist 
                      or if <code>HDF5_EXT_PREFIX</code> is not set, 
	              the library will get the prefix set via 
                      <a href="RM_H5P.html#Property-SetELinkPrefix">
                      <code>H5Pset_elink_prefix</code></a> and 
	              prepend it to <code>target_file_name</code>
	              to form a new <code>target_file_name</code>.
	          <li>If the new <code>target_file_name</code> does not exist 
                      or no prefix is being set 
	              by <a href="RM_H5P.html#Property-SetELinkPrefix">
                      <code>H5Pset_elink_prefix</code></a>,
	              then the path of the file associated with 
                      <code>link_loc_id</code> is obtained.
	              This path can be the absolute path or the 
                      current working directory plus the relative path
	              of that file when it is created/opened.
	              The library will 
                      prepend this path to <code>target_file_name</code> 
                      to form a new <code>target_file_name</code>.
	          <li>If the new <code>target_file_name</code> does not exist, 
                      then the library will look for 
                      <code>target_file_name</code> 
                      and will return failure/success accordingly.
	      </ul>
          <p>
          <li>If <code>target_file_name</code> is an absolute pathname, the 
              library will first try to find <code>target_file_name</code>.
              If <code>target_file_name</code> does not exist, 
              <code>target_file_name</code> is stripped of directory paths 
              to form a new <code>target_file_name</code>.   
              The search for the new <code>target_file_name</code> then follows 
              the same steps as described above for a relative pathname.
              See examples below illustrating how <code>target_file_name</code> 
              is stripped to form a new <code>target_file_name</code>.
      </ul>

      <p>
      Note that <code>target_file_name</code> is considered to be an absolute 
      pathname when the following condition is true:
      <ul>
          <li>For Unix, the first character of <code>target_file_name</code> 
              is a slash ( <code>/</code> ). 
              <p>
              For example, consider a <code>target_file_name</code> 
              of <code>/tmp/A.h5</code>.
              If that target file does not exist, 
              the new <code>target_file_name</code> after stripping 
              will be <code>A.h5</code>.
          <li>For Windows, there are 6 cases:
	      <ol>
	          <li><code>target_file_name</code> is an absolute drive with 
                      absolute pathname. 
                      <p>
                      For example, consider a <code>target_file_name</code> 
                      of <code>/tmp/A.h5</code>.
                      If that target file does not exist, 
	              the new <code>target_file_name</code> after stripping 
                      will be <code>A.h5</code>.
	          <li><code>target_file_name</code> is an absolute pathname 
                      without specifying drive name. 
                      <p>
                      For example, consider a <code>target_file_name</code> 
                      of <code>/tmp/A.h5</code>.
                      If that target file does not exist, 
                      the new <code>target_file_name</code> after stripping 
                      will be <code>A.h5</code>.
	          <li><code>target_file_name</code> is an absolute drive with 
                      relative pathname. 
                      <p>
                      For example, consider a <code>target_file_name</code> 
                      of <code>/tmp/A.h5</code>.
                      If that target file does not exist, 
                      the new <code>target_file_name</code> after stripping 
                      will be <code>tmp\A.h5</code>.
                  <li><code>target_file_name</code> is in UNC (Uniform Naming
                      Convention) format with server name, share name, 
                      and pathname. 
                      <p>
                      For example, consider a <code>target_file_name</code> 
                      of <code>/tmp/A.h5</code>.
                      If that target file does not exist, 
                      the new <code>target_file_name</code> after stripping 
                      will be <code>A.h5</code>.</p>
                      </li>
                  <li><code>target_file_name</code> is in Long UNC 
                      (Uniform Naming Convention) format with server name, 
                      share name, and pathname. 
                      <p>
                      For example, consider a <code>target_file_name</code> 
                      of <code>/tmp/A.h5</code>.
                      If that target file does not exist, 
                      the new <code>target_file_name</code> after stripping 
                      will be <code>A.h5</code>
                      </li>
                  <li><code>target_file_name</code> is in Long UNC 
                      (Uniform Naming Convention) format with an absolute drive 
                      and an absolute pathname. 
                      <p>
                      For example, consider a <code>target_file_name</code> 
                      of <code>/tmp/A.h5</code>.
                      If that target file does not exist, 
                      the new <code>target_file_name</code> after stripping 
                      will be <code>A.h5</code>
              </ol>
      </ul>
      <p>	
      The library opens target file <code>target_file_name</code> 
      with the file access property list that is set via 
      <a href="RM_H5P.html#Property-SetELinkFapl"> 
      <code>H5Pset_elink_fapl</code></a>
      when the external link <code>link_name</code> is accessed.
      If no such property list is set, the library uses the 
      file access property list associated with the file of
      <code>link_loc_id</code> to open the target file.
      <p>
      If an application requires additional control over file access flags
      or the file access property list, see 
      <a href="RM_H5P.html#Property-SetELinkCb">
      <code>H5Pset_elink_cb</code></a>; this function enables the use of an 
      external link callback function as described in
      <a href="H5L/H5L_elink_traverse_t.htm">
      <code>H5L_elink_traverse_t</code></a>.
      <p>
      <strong>Restriction:</strong>
      A file close degree property setting 
      (<a href="RM_H5P.html#Property-SetFcloseDegree"><code>H5Pset_fclose_degree</code></a>)
      in the external link file access property list 
      or in the external link callback function will be ignored.  
      A file opened by means of traversing an external link 
      is always opened with the weak file close degree property setting,
      <code>H5F_CLOSE_WEAK</code>.


<!-- NEW PAGE -->

  <p></p>
  <dt><strong>Parameters:</strong>
    <dd><table>
          <tr>
            <td valign="top"><em>const char *</em> <code>target_file_name</code>
                </td>
            <td valign="top">IN: Name of the target file containing the 
                target object</td></tr>
          <tr>
            <td valign="top"><em>const&nbsp;char&nbsp;*</em><code>target_obj_name&nbsp;&nbsp;&nbsp;&nbsp;</code></td>
            <td valign="top">IN: Path within the target file to the target 
                object</td></tr>
          <tr>
            <td valign="top"><em>hid_t</em> <code>link_loc_id</code></td>
            <td valign="top">IN: File or group identifier where the 
                new link is to be created</td></tr>
          <tr>
            <td valign="top"><em>const char *</em> <code>link_name</code></td>
            <td valign="top">IN: Name of the new link, 
                relative to <code>link_loc_id</code></td></tr>
          <tr>
            <td valign="top"><em>hid_t</em> <code>lcpl_id</code></td> 
            <td valign="top">IN: Link creation property list 
                identifier</td></tr>
          <tr>
            <td valign="top"><em>hid_t</em> <code>lapl_id</code></td> 
            <td valign="top">IN: Link access property list 
                identifier</td></tr>
      </table>

  <p></p>
  <dt><strong>Returns:</strong>
    <dd>Returns a non-negative value if successful;
        otherwise returns a negative value.

  <p></p>
  <dt><strong>Fortran90 Interface:</strong> h5lcreate_external_f
    <dd>
    <pre>
SUBROUTINE h5lcreate_external_f(file_name, obj_name, link_loc_id, link_name, &
	                        hdferr, lcpl_id, lapl_id) 
  IMPLICIT NONE
  CHARACTER(LEN=*), INTENT(IN) :: file_name  
                       ! Name of the file containing the target object. Neither 
                       ! the file nor the target object is required to exist. 
                       ! May be the file the link is being created in.
  CHARACTER(LEN=*), INTENT(IN) :: obj_name  
                       ! Name of the target object, which need not already exist.
  INTEGER(HID_T), INTENT(IN) :: link_loc_id 
                       ! The file or group identifier for the new link.
  CHARACTER(LEN=*), INTENT(IN) :: link_name 
                       ! The name of the new link.
  INTEGER, INTENT(OUT) :: hdferr        
                       ! Error code: 
                       ! 0 on success and -1 on failure
  INTEGER(HID_T), OPTIONAL, INTENT(IN) :: lcpl_id 
                       ! Link creation property list identifier.
  INTEGER(HID_T), OPTIONAL, INTENT(IN) :: lapl_id 
                       ! Link access property list identifier.
END SUBROUTINE h5lcreate_external_f
    </pre>

  <p></p>
  <dt><strong>See Also:</strong>
    <dd><a href="RM_H5P.html#Property-SetELinkFapl">
        <code>H5Pset_elink_fapl</code></a>,
        &nbsp;
        <a href="RM_H5P.html#Property-SetELinkCb">
        <code>H5Pset_elink_cb</code></a> 
        <p>

        <a href="H5L/H5L_elink_traverse_t.htm">
        <code>H5L_elink_traverse_t</code></a>

  <p></p>
  <dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>C</strong></td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">
            Function introduced in this release.</td></tr>
    </table>
</dl>




<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Lcreate_hard" -->
<hr>
<dl>

  <dt><div align=right><font color=999999 size=-1><i>
      Last modified: 9 November 2009
      </i></font></div>

  <dt><strong>Name:</strong> <a name="Link-CreateHard">H5Lcreate_hard</a> 
  <dt><strong>Signature:</strong>
    
  <dd><em>herr_t</em> <code>H5Lcreate_hard</code>(
      <em>hid_t</em> <code>obj_loc_id</code>, 
      <em>const char *</em><code>obj_name</code>,
      <em>hid_t</em> <code>link_loc_id</code>, 
      <em>const char *</em><code>link_name</code>,
      <em>hid_t</em> <code>lcpl_id</code>, 
      <em>hid_t</em> <code>lapl_id</code> 
      ) 
      <p></p>
  <dt><strong>Purpose:</strong>
    <dd>Creates a hard link to an object.
      <p></p>
  <dt><strong>Description:</strong>  
    <dd><code>H5Lcreate_hard</code> creates a new hard link to a 
      pre-existing object in an HDF5 file.  
      The new link may be one of many that point to that object.
      <p>
      The target object must already exist in the file.
      <p>
      <code>obj_loc_id</code> and <code>obj_name</code> specify the 
      location and name, respectively, of the target object,
      i.e., the object that the new hard link points to.
      <p>
      <code>link_loc_id</code> and <code>link_name</code> specify the 
      location and name, respectively, of the new hard link.
      <p>
      <code>obj_name</code> and <code>link_name</code> are interpreted
      relative to <code>obj_loc_id</code> and <code>link_loc_id</code>,
      respectively.
      <p> 
      If <code>obj_loc_id</code> and <code>link_loc_id</code> are 
      the same location, the HDF5 macro <code>H5L_SAME_LOC</code> 
      can be used for either parameter (but not both).
      <p> 
      <code>lcpl_id</code> and <code>lapl_id</code> are the
      link creation and access property lists associated with the 
      new link.
      <p> 
      Hard  and soft links are for use only if the target object 
      is in the current file.  
      If the desired target object is in a different file from the 
      new link, an external link may be created with  
      <a href="#Link-CreateExternal"><code>H5Lcreate_external</code></a>.
      <p> 
      The HDF5 library keeps a count of all hard links pointing to an 
      object; if the hard link count reaches zero (<code>0</code>),
      the object will be deleted from the file.  Creating new hard links
      to an object will prevent it from being deleted if other links 
      are removed.
      The library maintains no similar count for soft links and they 
      can dangle.
      </p>
  <dt><strong>Parameters:</strong>
    <dd><table>
          <tr>
            <td valign="top"><em>hid_t</em> <code>obj_loc_id</code></td>
            <td valign="top">IN: The file or group identifier for the 
                target object.</td></tr>
          <tr>
            <td valign="top"><em>const&nbsp;char&nbsp;*</em><code>obj_name&nbsp;&nbsp;&nbsp;&nbsp;</code></td>
            <td valign="top">IN: Name of the target object, 
                which must already exist.</td></tr>
          <tr>
            <td valign="top"><em>hid_t</em> <code>link_loc_id</code></td>
            <td valign="top">IN: The file or group identifier for the 
                new link.</td></tr> 
          <tr>
            <td valign="top"><em>const char *</em> <code>link_name</code></td>
            <td valign="top">IN: The name of the new link.</td></tr>
          <tr>
            <td valign="top"><em>hid_t</em> <code>lcpl_id</code></td> 
            <td valign="top">IN: Link creation property list identifier.</td></tr>
          <tr>
            <td valign="top"><em>hid_t</em> <code>lapl_id</code></td> 
            <td valign="top">IN: Link access property list identifier.</td></tr>
    </table>
       <p></p>
 <dt><strong>Returns:</strong>
    <dd>Returns a non-negative value if successful;
        otherwise returns a negative value.
<!-- NEW PAGE -->
       <p></p>
 <dt><strong>Fortran90 Interface:</strong> h5lcreate_hard_f
    <dd>
    <pre>
SUBROUTINE h5lcreate_hard_f(obj_loc_id, obj_name, link_loc_id, link_name, &
                            hdferr, lcpl_id, lapl_id)
  IMPLICIT NONE
  INTEGER(HID_T), INTENT(IN) :: obj_loc_id  
                          ! The file or group identifier for the target object.
  CHARACTER(LEN=*), INTENT(IN) :: obj_name  
                          ! Name of the target object, which must already exist.
  INTEGER(HID_T), INTENT(IN) :: link_loc_id 
                          ! The file or group identifier for the new link.
  CHARACTER(LEN=*), INTENT(IN) :: link_name 
                          ! The name of the new link.
  INTEGER, INTENT(OUT) :: hdferr        
                          ! Error code: 
                          ! 0 on success and -1 on failure
  INTEGER(HID_T), OPTIONAL, INTENT(IN) ::   lcpl_id         
                          ! Link creation property list identifier.
  INTEGER(HID_T), OPTIONAL, INTENT(IN) ::   lapl_id         
                          ! Link access property list identifier.
END SUBROUTINE h5lcreate_hard_f
    </pre>
        <!--<dt><strong>Non-C API(s):</strong>
    	<dd>
        
        <img src="Graphics/Java.gif"> 
        <img src="Graphics/C++.gif">
        -->
<p></p>
<dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>C</strong></td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">
            Function introduced in this release.</td></tr>
    </table>
</dl>




<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Lcreate_soft" -->
<hr>
<dl>

  <dt><div align=right><font color=999999 size=-1><i>
      Last modified: 19 September 2013
      </i></font></div>

  <dt><strong>Name:</strong> <a name="Link-CreateSoft">H5Lcreate_soft</a> 
  <dt><strong>Signature:</strong>
    
  <dd><em>herr_t</em> <code>H5Lcreate_soft</code>(
      <em>const char *</em><code>target_path</code>,
      <em>hid_t</em> <code>link_loc_id</code>, 
      <em>const char *</em><code>link_name</code>,
      <em>hid_t</em> <code>lcpl_id</code>, 
      <em>hid_t</em> <code>lapl_id</code> 
      ) 
      <p></p>
  <dt><strong>Purpose:</strong>
    <dd>Creates a soft link to an object.
      <p></p>
  <dt><strong>Description:</strong>  
    <dd><code>H5Lcreate_soft</code> creates a new soft link 
      to an object in an HDF5 file.  
      The new link may be one of many that point to that object.
      <p>
      <code>target_path</code> specifies the path to the target object, 
      i.e., the object that the new soft link points to.
      <code>target_path</code> can be anything and is interpreted at 
      lookup time.  This path may be absolute in the file or relative 
      to <code>link_loc_id</code>.  
      <p>
      <code>link_loc_id</code> must be a file or group identifier.
      <p>
      <code>link_loc_id</code> and <code>link_name</code> specify the 
      location and name, respectively, of the new soft link.
      <code>link_name</code> is interpreted relative to 
      <code>link_loc_id</code> 
      and must contain only the name of the soft link;
      <code>link_name</code> may not contain any additional path elements.
      <p>
      If <code>link_loc_id</code> is a group identifier, the object pointed 
      to by <code>link_name</code> will be accessed as a member of that group.
      If <code>link_loc_id</code> is a file identifier, the object  will be 
      accessed as a member of the file&rsquo;s root group. 
      <p> 
      <code>lcpl_id</code> and <code>lapl_id</code> are the
      link creation and access property lists associated with the 
      new link.
      <p>
      For instance, if <code>target_path</code> is <code>./foo</code>,  
      <code>link_loc_id</code> specifies <code>./x/y/bar</code>, 
      and the name of the new link is <code>new_link</code>, then
      a subsequent request for <code>./x/y/bar/new_link</code> will 
      return same the object as would be found at <code>./foo</code>.
      <p> 
      <code>H5Lcreate_soft</code> is for use only if the target object 
      is in the current file.  
      If the desired target object is in a different file from the 
      new link, use 
      <a href="#Link-CreateExternal"><code>H5Lcreate_external</code></a>
      to create an external link.
      <p>
      Soft links and external links are also known as symbolic links
      as they use a name to point to an object; hard links employ an 
      object&rsquo;s address in the file.
      <p> 
      Unlike hard links, a soft link in an HDF5 file is allowed
      to <i>dangle</i>, meaning that the target object need not exist
      at the time that the link is created.
      <p> 
      The HDF5 library does not keep a count of soft links as it
      does of hard links.
      </p>
  <dt><strong>Parameters:</strong>
    <dd><table>
          <tr>
            <td valign="top"><em>const&nbsp;char&nbsp;*</em><code>target_path&nbsp;&nbsp;&nbsp;&nbsp;</code></td>
            <td valign="top">IN: Path to the target object, 
                which is not required to exist.</td></tr>
          <tr>
            <td valign="top"><em>hid_t</em> <code>link_loc_id</code></td>
            <td valign="top">IN: The file or group identifier for the 
                new link.</td></tr>
          <tr>
            <td valign="top"><em>const char *</em> <code>link_name </code></td>
            <td valign="top">IN: The name of the new link.</td></tr>
          <tr>
            <td valign="top"><em>hid_t</em> <code>lcpl_id</code></td> 
            <td valign="top">IN: Link creation property list identifier.
                </td></tr>
          <tr>
            <td valign="top"><em>hid_t</em> <code>lapl_id</code></td> 
            <td valign="top">IN: Link access property list identifier.
                </td></tr>
    </table>
       <p></p>
 <dt><strong>Returns:</strong>
    <dd>Returns a non-negative value if successful;
        otherwise returns a negative value.
<!-- NEW PAGE -->
       <p></p>
 <dt><strong>Fortran90 Interface:</strong> h5lcreate_soft_f
    <dd>
    <pre>
SUBROUTINE h5lcreate_soft_f(target_path, link_loc_id, link_name, hdferr, &
                            lcpl_id, lapl_id)
  IMPLICIT NONE
  CHARACTER(LEN=*), INTENT(IN) :: target_path
                                 ! Path to the target object, 
                                 ! which is not required to exist.
  INTEGER(HID_T), INTENT(IN) :: link_loc_id     
                                 ! The file or group identifier for the new link.
  CHARACTER(LEN=*), INTENT(IN) :: link_name       
                                 ! The name of the new link.
  INTEGER, INTENT(OUT) :: hdferr ! Error code: 
                                 ! 0 on success and -1 on failure
  INTEGER(HID_T), OPTIONAL, INTENT(IN) :: lcpl_id
                                 ! Link creation property list identifier.
  INTEGER(HID_T), OPTIONAL, INTENT(IN) :: lapl_id
                                 ! Link access property list identifier.
END SUBROUTINE h5lcreate_soft_f
    </pre>
        <!--<dt><strong>Non-C API(s):</strong>
    	<dd>
        
        <img src="Graphics/Java.gif"> 
        <img src="Graphics/C++.gif">
        -->
<p></p>
<dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>C</strong></td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">
            Function introduced in this release.</td></tr>
    </table>
</dl>




<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Lcreate_ud" -->
<hr>
<dl>
  <dt><div align=right><font color=999999 size=-1><i>
      Last modified: 13 August 2009
      </i></font></div>

  <dt><strong>Name:</strong> <a name="Link-CreateUD">H5Lcreate_ud</a>
  <dt><strong>Signature:</strong>
    <dd><em>herr_t </em><code>H5Lcreate_ud</code>(
            <em>hid_t</em> <code>link_loc_id</code>,
            <em>const char *</em><code>link_name</code>,
            <em>H5L_type_t</em> <code>link_type</code>,
            <em>const char *</em><code>udata</code>,
            <em>size_t</em> <code>udata_size</code>,
            <em>hid_t</em> <code>lcpl_id</code>,
            <em>hid_t</em> <code>lapl_id</code>
        )
      <p></p>
  <dt><strong>Purpose:</strong>
    <dd>Creates a link of a  user-defined type.
      <p></p>
  <dt><strong>Description:</strong>
    <dd><code>H5Lcreate_ud</code> creates a link 
       of user-defined type <code>link_type</code> 
       named <code>link_name</code>
       at the location specified in <code>link_loc_id</code>
       with user-specified data <code>udata</code>.
       <p>
       <code>link_name</code> is interpreted relative to 
       <code>link_loc_id</code>. 
       <p>
       Valid values for the link class of the new link, 
       <code>link_type</code>, include <code>H5L_TYPE_EXTERNAL</code> 
       and any user-defined link classes that have been registered 
       with the library.
       See <a href="#Link-Register"><code>H5Lregister</code></a> 
       for further information.
       <p>
<!--
       The link class of the new link, <code>link_type</code>, 
       must already be registered with the library.
       Such user-defined link classes are registered with 
       <a href="#Link-Register"><code>H5Lregister</code></a>.
       <p>
       The <code>H5L_type_t</code>, the <small>ENUM</small> specifying 
       valid link classes, is defined in <code>H5Lpublic.h</code>.
       Valid values without registered user-defined link types 
       include the following:
           <br><code>&nbsp;&nbsp;&nbsp;&nbsp;
               H5L_TYPE_HARD</code>
           <br><code>&nbsp;&nbsp;&nbsp;&nbsp;
               H5L_TYPE_SOFT</code>
           <br><code>&nbsp;&nbsp;&nbsp;&nbsp;
               H5L_TYPE_EXTERNAL</code>
           <br>
       Registering a user-defined link type with <code>H5Lregister</code>
       adds a user-defined symbol to the <code>H5L_type_t</code>
       <small>ENUM</small>; 
       that user-defined symbol is then passed in the <code>link_type</code> 
       parameter of <code>H5Lcreate_ud</code> 
       and will be returned by <code>H5Lget_info</code>.
       <p>
-->
       The format of the information pointed to by <code>udata</code> is
       defined by the user. 
       <code>udata_size</code> specifies the size of the <code>udata</code> 
       buffer.
       <code>udata</code> may be <small>NULL</small> if 
       <code>udata_size</code> is zero (<code>0</code>).
       <p>
       The property lists specified by <code>lcpl_id</code> and
       <code>lapl_id</code> specify properties used to create and access 
       the link.
       <p></p>
  <dt><strong>Note:</strong>
    <dd>The external link type, <code>H5L_TYPE_EXTERNAL</code>, 
        included in the HDF5 Library distribution, is implemented as a 
        user-defined link type.
        This was done, in part, to provide a model for the implementation
        of other user-defined links.
        <p>
  <dt><strong>Parameters:</strong>
    <dd><table>
      <tr>
        <td valign="top"><em>hid_t</em> <code>link_loc_id</code>
        </td>
        <td valign="top">IN: Link location identifier 
        </td></tr>
      <tr>
        <td valign="top"><em>const&nbsp;char&nbsp;*</em><code>link_name&nbsp;&nbsp;&nbsp;&nbsp;</code>
        </td>
        <td valign="top">IN: Link name
        </td></tr>
      <tr>
        <td valign="top"><em>H5L_type_t</em> <code>link_type</code>
        </td>
        <td valign="top">IN: User-defined link class
        </td></tr>
      <tr>
        <td valign="top"><em>const char *</em><code>udata</code>
        </td>
        <td valign="top">IN: User-supplied link information
        </td></tr>
      <tr>
        <td valign="top"><em>size_t </em><code>udata_size</code>
        </td>
        <td valign="top">IN: Size of <code>udata</code> buffer
        </td></tr>
      <tr>
        <td valign="top"><em>hid_t </em><code>lcpl_id</code>
        </td>
        <td valign="top">IN: Link creation property list identifier
        </td></tr>
      <tr>
        <td valign="top"><em>hid_t </em><code>lapl_id</code>
        </td>
        <td valign="top">IN: Link access property list identifier
        </td></tr>
    </table>
      <p></p>
  <dt><strong>Returns:</strong>
    <dd>Returns a non-negative value if successful;
        otherwise returns a negative value.

      <p></p>
  <dt><strong>Fortran90 Interface:</strong> <!--h5l***_f-->
    <dd>
      None.
<!--
    <pre>

    </pre>
-->

    <p></p>
<dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>C</strong></td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">
            Function introduced in this release.</td></tr>
    </table>
</dl>





<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Ldelete" -->
<hr>
<dl>

<dt><div align=right><font color=999999 size=-1><i>
    Last modified: 16 September 2014
    </i></font></div>

  <dt><strong>Name:</strong> <a name="Link-Delete">H5Ldelete</a>
  <dt><strong>Signature:</strong>
    <dd><em>herr_t </em><code>H5Ldelete</code>(
        <em>hid_t</em> <code>loc_id</code>,
        <em>const char *</em><code>name</code>,
        <em>hid_t</em> <code>lapl_id</code>
    )
  <p></p>
  <dt><strong>Purpose:</strong>
    <dd>Removes a link from a group. 
  <p></p>
  <dt><strong>Description:</strong>
    <dd><code>H5Ldelete</code> removes the link specified by 
        <code>name</code> from the location <code>loc_id</code>.
        <p>
        If the link being removed is a hard link, <code>H5Ldelete</code> 
        also decrements the link count for the object to which 
        <code>name</code> points.  Unless there is a duplicate hard link
        in that group, this action removes the object to which 
        <code>name</code> points from the group that previously contained it.
        <p>
        Object headers keep track of how many hard links refer to an object;
        when the hard link count, also referred to as the reference count, 
        reaches zero, the object can be removed from the file.  
        The file space associated will then be released, i.e., identified in 
        memory as freespace.   
        Objects which are open are not removed until all identifiers to 
        the object are closed.
        <p>
  <dt><strong>Warning:</strong>
    <dd>Exercise caution in the use of <code>H5Ldelete</code>; 
        if the link being removed is on the only path leading to an 
        HDF5 object, that object may become permanently inaccessible in 
        the file.
        <p> 
  <dt><strong>Parameters:</strong>
    <dd><table>      
          <tr>
            <td valign="top"><em>hid_t</em> <code>loc_id</code></td>
            <td valign="top">IN: Identifier of the file or group containing  
                the object.</td></tr>
          <tr>
            <td valign="top"><em>const&nbsp;char&nbsp;*</em><code>name&nbsp;&nbsp;&nbsp;&nbsp;</code></td>
            <td valign="top">IN: Name of the link to delete.</td></tr>
          <tr>
            <td valign="top"><em>hid_t</em> <code>lapl_id</code></td>
            <td valign="top">IN: Link access property list identifier.</td></tr>
        </table>
  </p>
  <dt><strong>Returns:</strong>
    <dd>Returns a non-negative value if successful;
        otherwise returns a negative value.
  <p></p>
  <dt><strong>Fortran90 Interface:</strong> h5ldelete_f
    <dd>
    <pre>
SUBROUTINE h5ldelete_f(loc_id, name, hdferr, lapl_id)
  IMPLICIT NONE
  INTEGER(HID_T), INTENT(IN) :: loc_id  ! Identifier of the file or group 
                                        ! containing the object
  CHARACTER(LEN=*), INTENT(IN) :: name  ! Name of the link to delete
  INTEGER, INTENT(OUT) :: hdferr        ! Error code: 
                                        ! 0 on success and -1 on failure 
  INTEGER(HID_T), OPTIONAL, INTENT(IN) :: lapl_id 
                                        ! Link access property list identifier
END SUBROUTINE h5ldelete_f
    </pre>
        <!--<dt><strong>Non-C API(s):</strong>
    	<dd>
        
        <img src="Graphics/Java.gif"> 
        <img src="Graphics/C++.gif">
        -->
<p></p>
<dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>C</strong></td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">
            Function introduced in this release.</td></tr>
    </table>
</dl>




<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Ldelete_by_idx" -->
<hr>
<dl>
  <dt><strong>Name:</strong> <a name="Link-DeleteByIdx">H5Ldelete_by_idx</a>
  <dt><strong>Signature:</strong>
    <dd><em>herr_t</em> <code>H5Ldelete_by_idx</code>(
        <em>hid_t</em> <code>loc_id</code>,
        <em>const char *</em><code>group_name</code>,
        <em>H5_index_t</em> <code>index_field</code>,
        <em>H5_iter_order_t</em> <code>order</code>,
        <em>hsize_t</em> <code>n</code>,
        <em>hid_t</em> <code>lapl_id</code>
    )
  <p>
  <dt><strong>Purpose:</strong>
    <dd>Removes the <i>n</i>th link in a group.
  <p>
  <dt><strong>Description:</strong>
    <dd><code>H5Ldelete_by_idx</code> removes the <i>n</i>th link in a group
      according to the specified order, <code>order</code>, 
      in the specified index, <code>index</code>.
      <p>
      If <code>loc_id</code> specifies the group in which the link
      resides, <code>group_name</code> can be a dot (.).
  <p>
  <dt><strong>Parameters:</strong>
    <dd><table>
      <tr>
        <td valign="top"><em>hid_t</em> <code>loc_id</code></td>
        <td valign="top">IN: File or group identifier specifying location 
            of subject group</td></tr>
      <tr>
        <td valign="top"><em>const&nbsp;char&nbsp;*</em><code>group_name&nbsp;&nbsp;&nbsp;&nbsp;</code></td>
        <td valign="top">IN: Name of subject group</td></tr>
      <tr>
        <td valign="top"><em>H5_index_t</em> <code>index_field</code></td>
        <td valign="top">IN: Index or field which determines the order</td></tr>
      <tr>
        <td valign="top"><em>H5_iter_order_t</em> <code>order</code></td>
        <td valign="top">IN: Order within field or index</td></tr>
      <tr>
        <td valign="top"><em>hsize_t</em> <code>n</code></td>
        <td valign="top">IN: Link for which to retrieve information</td></tr>
      <tr>
        <td valign="top"><em>hid_t</em> <code>lapl_id</code></td>
        <td valign="top">IN: Link access property list</td></tr>
    </table>
  <p>
  <dt><strong>Returns:</strong>
    <dd>Returns a non-negative value if successful;
        otherwise returns a negative value.
  <p>
  <dt><strong>Fortran90 Interface:</strong> h5ldelete_by_idx_f
    <dd>
    <pre>
SUBROUTINE h5ldelete_by_idx_f(loc_id, group_name, index_field, order, n, &
     hdferr, lapl_id)
  IMPLICIT NONE
  INTEGER(HID_T), INTENT(IN) :: loc_id       
                           ! Identifer for object to which attribute is attached.
  CHARACTER(LEN=*), INTENT(IN) :: group_name 
                           ! Name of object, relative to location, 
                           ! from which attribute is to be removed
  INTEGER, INTENT(IN) :: index_field         
                           ! Type of index; Possible values are:
                           !    H5_INDEX_UNKNOWN_F   - Unknown index type
                           !    H5_INDEX_NAME_F      - Index on names
                           !    H5_INDEX_CRT_ORDER_F - Index on creation order
                           !    H5_INDEX_N_F	      - Number of indices defined
  INTEGER, INTENT(IN) :: order 
                           ! Order in which to iterate over index; 
                           ! Possible values are:
                           !    H5_ITER_UNKNOWN_F  - Unknown order
                           !    H5_ITER_INC_F      - Increasing order
                           !    H5_ITER_DEC_F      - Decreasing order
                           !    H5_ITER_NATIVE_F   - No particular order, 
                           !                         whatever is fastest
                           !    H5_ITER_N_F	   - Number of iteration orders
  INTEGER(HSIZE_T), INTENT(IN) :: n      
                           ! Offset within index 
  INTEGER, INTENT(OUT) :: hdferr         
                           ! Error code:
                           ! 0 on success and -1 on failure
  INTEGER(HID_T), OPTIONAL, INTENT(IN) :: lapl_id     
                           ! Link access property list
END SUBROUTINE h5ldelete_by_idx_f
    </pre>
        <!--<dt><strong>Non-C API(s):</strong>
    	<dd>
        
        <img src="Graphics/Java.gif"> 
        <img src="Graphics/C++.gif">
        -->
  <p>
  <dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>C</strong></td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">
            Function introduced in this release.</td></tr>
    </table>
</dl>





<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Lexists" -->
<hr>
<dl>
<dt><div align=right><font color=999999 size=-1><i>
    Last modified: 1 April 2016
    </i></font></div>

  <dt><strong>Name:</strong> <a name="Link-Exists">H5Lexists</a>
  <dt><strong>Signature:</strong>
    <dd><em>htri_t</em> <code>H5Lexists</code>(
        <em>hid_t</em> <code>loc_id</code>, 
        <em>const char *</em><code>name</code>, 
        <em>hid_t</em> <code>lapl_id</code>
    )

  <p>
  <dt><strong>Purpose:</strong>
    <dd>Determine whether a link with the specified name exists in a group.

  <p>
  <dt><strong>Description:</strong>
    <dd><code>H5Lexists</code> allows an application to determine whether 
        the link <code>name</code> exists in 
        the group or file specified with <code>loc_id</code>.  
        The link may be of any type;
        only the presence of a link with that name is checked.

        <p>
        Note that <code>H5Lexists</code> verifies only that the target 
        link exists.
        If <code>name</code> includes either a relative path or 
        an absloute path to the target link, intermediate steps along the 
        path must be verified before the existence of the target link 
        can be safely checked.  
        If the path is not verified and an intermediate element of the path 
        does not exist, <code>H5Lexists</code> will fail. 
        The example in the next paragraph illustrates one step-by-step
        method for verifying the existence of a link with a relative 
        or absolute path.

        <p>
        <b>Example:</b> Use the following steps to verify the existence 
        of the link <code>datasetD</code> 
        in the group <code>group1/group2/softlink_to_group3/</code>, 
        where <code>group1</code> is a member of
        the group specified by <code>loc_id</code>:
        <ul>
            <p>
            <li>First use <code>H5Lexists</code> to verify that
                <code>group1</code> exists.
            <li>If <code>group1</code> exists, 
                use <code>H5Lexists</code> again, this time
                with <code>name</code> set to <code>group1/group2</code>, 
                to verify that<code>group2</code> exists.
            <li>If <code>group2</code> exists, 
                use <code>H5Lexists</code> with <code>name</code> 
                set to <code>group1/group2/softlink_to_group3</code> 
                to verify that <code>softlink_to_group3</code> exists.
                <br>&nbsp;
            <li>If <code>softlink_to_group3</code> exists, 
                you can now safely use <code>H5Lexists</code>
                with <code>name</code> set to 
                <code>group1/group2/softlink_to_group3/datasetD</code>
                to verify that the target link, <code>datasetD</code>, exists.
        </ul>
        <p>
        If the link to be verified is specified with an absolute path,
        the same approach should be used, but starting with the 
        first link in the file&rsquo;s root group. 
        For instance, if <code>datasetD</code> were in 
        <code>/group1/group2/softlink_to_group3</code>, the first call to
        <code>H5Lexists</code> would have <code>name</code> set to 
        <code>/group1</code>.</p>
        <p>
        Note that this is an outline and does not include all 
        necessary details. Depending on circumstances, for example, 
        you may need to verify that an intermediate link points to 
        a group and that a soft link points to an existing target.</p>

<dt><strong>Note on Behavior Change:</strong>
    <dd>
        The behavior of <code>H5Lexists</code> was changed 
        in the 1.10.0 release in the case where the root group, 
        &ldquo;/&rdquo;, is the name of the link. This change is 
        described below:
        <br />
        <ol>
        <li>
        Let &lsquo;file&rsquo; denote a valid HDF5 file identifier, 
        and let &lsquo;lapl&rsquo; denote a valid link access property 
        list identifier. A call to <code>H5Lexists</code> with arguments 
        &lsquo;file&rsquo;, &ldquo;/&rdquo;, and &lsquo;lapl&rsquo; 
        returns a positive value; in other words, 
        <code>H5Lexists(file, "/", lapl)</code> returns a positive value. 
        In HDF5 version 1.8.16, this function returns 0.
        </li>
        <li>
        Let &lsquo;root&rsquo; denote a valid HDF5 group identifier 
        that refers to the root group of an HDF5 file, and let 
        &lsquo;lapl&rsquo; denote a valid link access property list 
        identifier. A call to <code>H5Lexists</code> with arguments 
        &lsquo;root&rsquo;, &ldquo;/&rdquo;, and &lsquo;lapl&rsquo; 
        returns a positive value; in other words, 
        <code>H5Lexists(root, "/", lapl)</code> returns a postive value. 
        In HDF5 version 1.8.16, this function returns 0.
        </li>
        </ol>
        <br />
        Note that the function accepts link names <em>and</em> path 
        names. This is potentially misleading to callers, and we plan 
        to separate the functionality for link names and path names in 
        a future release.
        <br />
        </dd></dt>
        

  <br />
  <dt><strong>Parameters:</strong>
    <dd><table>
      <tr>
        <td valign="top"><em>hid_t</em> <code>loc_id</code>
        </td>
        <td valign="top">IN: Identifier of the file or group to query.
        </td></tr>
      <tr>
        <td valign="top"><em>const&nbsp;char&nbsp;*</em><code>name</code>&nbsp;&nbsp;&nbsp;&nbsp;
        </td>
        <td valign="top">IN: The name of the link to check.
        </td></tr>
      <tr>
        <td valign="top"><em>hid_t</em> <code>lapl_id</code>
        </td>
        <td valign="top">IN: Link access property list identifier.
        </td></tr>
    </table>

  <p>
  <dt><strong>Returns:</strong>
    <dd>Returns a positive value if the link exists.
        <br />
        Returns 0 if the link does not exist.
        <br />
        Returns a negative value when the function fails and may 
        return a negative value if the link does not exist. See 
        &ldquo;Failure Modes&rdquo; below.
        </dd>
<!-- NEW PAGE -->
  <p>
  <dt><strong>Failure Modes:</strong>
    <dd><code>H5Lexists</code> checks the existence of only the final 
        element in a relative or absolute path; it does not check
        any other path elements.
        The function will therefore fail when both of the following 
        conditions exist:
        <ul>
            <li><code>name</code> is not local to the group specified 
                by <code>loc_id</code> 
                or, if <code>loc_id</code> is something other than a 
                group identifier,  <code>name</code> is not local to 
                the root group.
            <li>Any element of the relative path or absolute path in
                <code>name</code>, except the target link, does not exist.
        </ul>

  <p>
  <dt><strong>Fortran90 Interface:</strong> h5lexists_f
    <dd>
    <pre>
SUBROUTINE h5lexists_f(loc_id, name, link_exists, hdferr, lapl_id)
  IMPLICIT NONE
  INTEGER(HID_T), INTENT(IN) :: loc_id ! Identifier of file or group to query.
  CHARACTER(LEN=*), INTENT(IN) :: name ! Link name to check.
  LOGICAL, INTENT(OUT) :: link_exists  ! .TRUE. if exists, .FALSE. otherwise
  INTEGER, INTENT(OUT) :: hdferr       ! Error code:
                                       ! 0 on success and -1 on failure
  INTEGER(HID_T), OPTIONAL, INTENT(IN) :: lapl_id 
                                       ! Link access property list identifier.
END SUBROUTINE h5lexists_f 
    </pre>

  <p>
  <dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>C</strong></td></tr>
        <tr>
          <td valign="top">1.10.0</td>
          <td valign="top">
            Function behavior changed in this release. See the 
            &ldquo;Note on Behavior Change&rdquo; section above.
            </td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">
            Function introduced in this release.</td></tr>
    </table>
</dl>




<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Lget_info" -->
<hr>
<dl>

  <dt><div align=right><font color=999999 size=-1><i>
      Last modified: 24 September 2014
      </i></font></div>

  <dt><strong>Name:</strong> <a name="Link-GetInfo">H5Lget_info</a>
  <dt><strong>Signature:</strong>
    <dd><em>herr_t</em> <code>H5Lget_info</code>(
        <em>hid_t</em> <code>link_loc_id</code>,
        <em>const char *</em><code>link_name</code>,
        <em>H5L_info_t *</em><code>link_buff</code>,
        <em>hid_t</em> <code>lapl_id</code>
    )
  <p></p>
  <dt><strong>Purpose:</strong>
    <dd>Returns information about a link.  
  <p></p>
  <dt><strong>Description:</strong>
    <dd><code>H5Lget_info</code> returns information about the 
        specified link through the <code>link_buff</code> argument. 
        <p>
        A file or group identifier, <code>link_loc_id</code>, specifies the
        location of the link.
        A link name, <code>link_name</code>, interpreted relative to 
        <code>loc_id</code>, specifies the link being queried.
        <p>
        <code>lapl_id</code> is the link access property list associated 
        with the link <code>link_name</code>.
        In the general case, when default link access properties are 
        acceptable, this can be passed in as <code>H5P_DEFAULT</code>.
        An example of a situation that requires a non-default link access 
        property list is when the link is an external link; an external link 
        may require that a link prefix be set in a link access property list
        (see <a href="RM_H5P.html#Property-SetELinkPrefix">
        <code>H5Pset_elink_prefix</code></a>).
        <p>
        <code>H5Lget_info</code> returns information about  
        <code>link_name</code> in the data structure 
        <code>H5L_info_t</code>,
        which is described below and defined in <code>H5Lpublic.h</code>.
        This structure is returned in the buffer <code>link_buff</code>.
        <pre>
    typedef struct {
        H5L_type_t     type;
        hbool_t        corder_valid;
        int64_t        corder;
        H5T_cset_t     cset;
        union {
            haddr_t    address;
            size_t     val_size;
        } u;
    } H5L_info_t;
        </pre>

        <p>
        In the above struct,
        <code>type</code> specifies the link class.  
        Valid values include the following:
        <table border=0>
          <tr><td>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td>
            <code>H5L_TYPE_HARD</code>
            </td><td>
            Hard link
          </td></tr><tr><td>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td>
            <code>H5L_TYPE_SOFT</code>
            </td><td>
            Soft link
          </td></tr><tr><td>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td>
            <code>H5L_TYPE_EXTERNAL&nbsp;&nbsp;&nbsp;&nbsp;</code>
            </td><td>
            External link
          </td></tr><tr><td>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td>
            <code>H5L_TYPE_ERROR</code>
            </td><td>
            Error
          </td></tr>
        </table>
        There will be additional valid values if user-defined links 
        have been registered.

        <p>
        <code>corder</code> specifies the link&rsquo;s creation order 
        position while  <code>corder_valid</code> indicates whether 
        the value in <code>corder</code> is valid.
        <p>
        If <code>corder_valid</code> is <code>TRUE</code>,
        the value in <code>corder</code> is known to be valid;
        if <code>corder_valid</code> is <code>FALSE</code>,
        the value in <code>corder</code> is presumed to be invalid;
        <p>
        <code>corder</code> starts at zero (<code>0</code>) 
        and is incremented by one (<code>1</code>) as new links are created. 
        But higher-numbered entries are not adjusted when a lower-numbered 
        link is deleted; the deleted link&rsquo;s creation order position is 
        simply left vacant.  
        In such situations, the value of <code>corder</code> for the 
        last link created will be larger than the number of links remaining 
        in the group.

        <p>
        <code>cset</code> specifies the character set in which the link name
        is encoded.  Valid values include the following:
        <table border=0>
          <tr><td>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td>
            <code>H5T_CSET_ASCII</code>
            </td><td>
            US ASCII
          </td></tr><tr><td>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td>
            <code>H5T_CSET_UTF8&nbsp;&nbsp;&nbsp;&nbsp;</code>
            </td><td>
            UTF-8 Unicode encoding
          </td></tr>
        </table>
        This value is set with 
        <a href="RM_H5P.html#Property-SetCharEncoding">
        <code>H5Pset_char_encoding</code></a>.
        <p>
        <code>address</code> and <code>val_size</code> are returned
        for hard and symbolic links, respectively. 
        Symbolic links include soft and external links and 
        some user-defined links. 
        <p>
        If the link is a hard link, <code>address</code> specifies 
        the file address that the link points to.
        <p>
        If the link is a symbolic link, <code>val_size</code> will be 
        the length of the link value, e.g., the length of the name of 
        the pointed-to object with a null terminator.
        <p>
  <dt><strong>Parameters:</strong>
    <dd><table>
      <tr>
        <td valign="top"><em>hid_t</em> <code>link_loc_id</code></td>
        <td valign="top">IN: File or group identifier.</td></tr>
      <tr>
        <td valign="top"><em>const char</em> <code>*link_name</code></td>
        <td valign="top">IN: Name of the link for which information is being 
            sought.</td></tr>
      <tr>
        <td valign="top"><em>H5L_info_t</em>&nbsp;<code>*link_buff&nbsp;&nbsp;&nbsp;&nbsp;</code></td>
        <td valign="top">OUT: Buffer in which link information is 
            returned.</td></tr>
      <tr>
        <td valign="top"><em>hid_t</em> <code>lapl_id</code></td>
        <td valign="top">IN: Link access property list identifier.</td></tr>
    </table>
  <p>
  <dt><strong>Returns:</strong>
    <dd> Returns a non-negative value if successful, with the fields of 
         <code>link_buff</code> (if non-null) initialized.
         Otherwise returns a negative value.
  <p></p>
  <dt><strong>Fortran90 Interface:</strong> h5lget_info_f
    <dd>

    <pre>
SUBROUTINE h5lget_info_f(link_loc_id, link_name, &
     cset, corder, f_corder_valid, link_type, address, val_size, &
     hdferr, lapl_id)
  IMPLICIT NONE
  INTEGER(HID_T), INTENT(IN) :: link_loc_id 
                        ! File or group identifier.
  CHARACTER(LEN=*), INTENT(IN) :: link_name 
                        ! Name of the link for which information is being sought.
  INTEGER, INTENT(OUT) :: cset 
                        ! Indicates the character set used for the link&rsquo;s name. 
  INTEGER, INTENT(OUT) :: corder 
                        ! Specifies the link&rsquo;s creation order position.
  LOGICAL, INTENT(OUT) :: f_corder_valid 
                        ! Indicates whether the value in corder is valid.
  INTEGER, INTENT(OUT) :: link_type 
                        ! Specifies the link class:
                        !  H5L_TYPE_HARD_F      - Hard link
                        !  H5L_TYPE_SOFT_F      - Soft link
                        !  H5L_TYPE_EXTERNAL_F  - External link
                        !  H5L_TYPE_ERROR_F     - Error
  INTEGER(HADDR_T), INTENT(OUT) :: address  
                        ! If the link is a hard link, address specifies the file
                        ! address that the link points to
  INTEGER(SIZE_T), INTENT(OUT) :: val_size 
                        ! If the link is a symbolic link, val_size will be the 
                        ! length of the link value, i.e. the length of the name 
                        ! of the pointed-to object with a null terminator. 
</pre>
<!-- NEW PAGE -->
<pre>
  INTEGER, INTENT(OUT) :: hdferr 
                        ! Error code:
                        ! 0 on success and -1 on failure
  INTEGER(HID_T), OPTIONAL, INTENT(IN) :: lapl_id  
                        ! Link access property list
END SUBROUTINE h5lget_info_f
    </pre>

<p></p>
<dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>C</strong></td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">
            Function introduced in this release.</td></tr>
        <tr>
          <td valign="top">1.8.2</td>
          <td valign="top">
            Fortran subroutine added in this release.</td></tr>
        <tr>
          <td valign="top">1.8.4</td>
          <td valign="top">
            Fortran subroutine syntax changed in this release.</td></tr>
    </table>
</dl>




<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Lget_info_by_idx" -->
<hr>
<dl>

  <dt><div align=right><font color=999999 size=-1><i>
      Last modified: 11 November 2009
      </i></font></div>

  <dt><strong>Name:</strong> <a name="Link-GetInfoByIdx">H5Lget_info_by_idx</a>
  <dt><strong>Signature:</strong>
    <dd><em>herr_t</em> <code>H5Lget_info_by_idx</code>(
        <em>hid_t</em> <code>loc_id</code>,
        <em>const char *</em><code>group_name</code>,
        <em>H5_index_t</em> <code>index_field</code>,
        <em>H5_iter_order_t</em> <code>order</code>,
        <em>hsize_t</em> <code>n</code>,
        <em>H5L_info_t</em> *<code>link_val</code>,
        <em>hid_t</em> <code>lapl_id</code>
    )
  <p>
  <dt><strong>Purpose:</strong>
    <dd>Retrieves metadata for a link in a group, according to the order 
        within a field or index.
  <p>
  <dt><strong>Description:</strong>
    <dd><code>H5Lget_info_by_idx</code> returns the metadata for a link
      in a group according to a specified field or index and a specified
      order.
      <p>
      The link for which information is to be returned is specified by 
      <code>index_field</code>, <code>order</code>, and <code>n</code> 
      as follows:
      <ul>
          <li><code>index_field</code> specifies the field by which
              the links in <code>group_name</code> are ordered.
              The links may be indexed on this field, in which case
              operations seeking specific links are likely to complete 
              more quickly.
          <li><code>order</code> specifies the order in which the links
              are to be referenced for the purposes of this function. 
          <li><code>n</code> specifies the position of the subject link.
              Note that this count is zero-based; 
              <code>0</code> (zero) indicates that the function will return
              the value of the first link; 
              if <code>n</code> is <code>5</code>, the function will return
              the value of the sixth link; etc.
      </ul>
      <p>
      For example, assume that 
      <code>index_field</code>, <code>order</code>, and <code>n</code> are 
      <code>H5_INDEX_NAME</code>, <code>H5_ITER_DEC</code>, and <code>5</code>,
      respectively. 
      <code>H5_INDEX_NAME</code> indicates that the links are accessed 
      in alpha-numeric order by their names.  
      <code>H5_ITER_DEC</code> specifies that the list be traversed in 
      reverse order, or in decremented order.
      And <code>5</code> specifies that this call to the function will 
      return the metadata for the 6th link (<code>n</code> + 1) from the end.
      <p>
      See <a href="#Link-Iterate"><code>H5Literate</code></a>
      for a list of valid values and further discussion regarding 
      <code>index_field</code> and <code>order</code>.
      <p>
      If <code>loc_id</code> specifies the group in which the link
      resides, <code>group_name</code> can be a dot (.).
  <p>
  <dt><strong>Parameters:</strong>
    <dd><table>
      <tr>
        <td valign="top"><em>hid_t</em> <code>loc_id</code></td>
        <td valign="top">IN: File or group identifier specifying location 
            of subject group</td></tr>
      <tr>
        <td valign="top"><em>const&nbsp;char&nbsp;*</em><code>group_name&nbsp;&nbsp;&nbsp;&nbsp;</code></td>
        <td valign="top">IN: Name of subject group</td></tr>
      <tr>
        <td valign="top"><em>H5_index_t</em> <code>index_field</code></td>
        <td valign="top">IN: Index or field which determines the order</td></tr>
      <tr>
        <td valign="top"><em>H5_iter_order_t</em> <code>order</code></td>
        <td valign="top">IN: Order within field or index</td></tr>
      <tr>
        <td valign="top"><em>hsize_t</em> <code>n</code></td>
        <td valign="top">IN: Link for which to retrieve information</td></tr>
      <tr>
        <td valign="top"><em>H5L_info_t</em> *<code>link_val</code></td>
        <td valign="top">OUT: Buffer in which link value is returned</td></tr>
      <tr>
        <td valign="top"><em>hid_t</em> <code>lapl_id</code></td>
        <td valign="top">IN: Link access property list</td></tr>
    </table>
  <p>
  <dt><strong>Returns:</strong>
    <dd>Returns a non-negative value if successful;
        otherwise returns a negative value.
<!-- NEW PAGE -->
  <p>
  <dt><strong>Fortran90 Interface:</strong> h5lget_info_by_idx_f
    <dd>
    <pre>
SUBROUTINE h5lget_info_by_idx_f(loc_id, group_name, index_field, order, n, &
               link_type, f_corder_valid, corder, cset, address, val_size, &
               hdferr, lapl_id)
  IMPLICIT NONE
  INTEGER(HID_T), INTENT(IN) :: loc_id 
                             ! File or group identifier specifying 
                             ! location of subject group  
  CHARACTER(LEN=*), INTENT(IN) :: group_name 
                             ! Name of subject group
  INTEGER, INTENT(IN) :: index_field   
                             ! Index/field which determines the order
                             !   H5_INDEX_UNKNOWN_F   - Unknown index type
                             !   H5_INDEX_NAME_F      - Index on names
                             !   H5_INDEX_CRT_ORDER_F - Index on creation order
                             !   H5_INDEX_N_F	      - Number of indices defined
  INTEGER, INTENT(IN) :: order        
                             ! Order in which to iterate over index; 
                             ! Possible values are:
                             !    H5_ITER_UNKNOWN_F  - Unknown order
                             !    H5_ITER_INC_F      - Increasing order
                             !    H5_ITER_DEC_F      - Decreasing order
                             !    H5_ITER_NATIVE_F   - No particular order, 
                             !                         whatever is fastest
  INTEGER(HSIZE_T), INTENT(IN) :: n   
                             ! Attribute&rsquo;s position in index
  INTEGER, INTENT(OUT) :: link_type 
                             ! Specifies the link class:
     	                     !   H5L_TYPE_HARD_F      - Hard link
     	                     !   H5L_TYPE_SOFT_F      - Soft link
     	                     !   H5L_TYPE_EXTERNAL_F  - External link
     	                     !   H5L_TYPE_ERROR_F     - Error
  LOGICAL, INTENT(OUT) :: f_corder_valid 
                             ! Indicates whether the creation order data is 
                             ! valid for this attribute 
  INTEGER, INTENT(OUT) :: corder 
                             ! Is a positive integer containing the creation 
                             ! order of the attribute
  INTEGER, INTENT(OUT) :: cset 
                             ! Indicates the character set used for the 
                             ! attribute&rsquo;s name
  INTEGER(HADDR_T), INTENT(OUT) :: address  
                             ! If the link is a hard link, address specifies the 
                             ! file address that the link points to
  INTEGER(SIZE_T), INTENT(OUT) :: val_size 
                             ! If the link is a symbolic link, val_size will be 
                             ! the length of the link value, i.e. the length of 
                             ! the name of the pointed-to object with a null 
                             ! terminator.
  INTEGER, INTENT(OUT) :: hdferr       
                             ! Error code:
                             ! 0 on success and -1 on failure
  INTEGER(HID_T), OPTIONAL, INTENT(IN) :: lapl_id  
                             ! Link access property list
END SUBROUTINE h5lget_info_by_idx_f  
    </pre>


<!-- NEW PAGE -->

  <p>
  <dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>C</strong></td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">
            Function introduced in this release.</td></tr>
        <tr>
          <td valign="top">1.8.2</td>
          <td valign="top">
            Fortran subroutine added in this release.</td></tr>
        <tr>
          <td valign="top">1.8.4</td>
          <td valign="top">
            Fortran subroutine syntax changed in this release.</td></tr>
    </table>
</dl>




<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Lget_name_by_idx" -->
<hr>
<dl>

  <dt><div align=right><font color=999999 size=-1><i>
    Last modified: 3 April 2013
      </i></font></div>

  <dt><strong>Name:</strong> <a name="Link-GetNameByIdx">H5Lget_name_by_idx</a>
  <dt><strong>Signature:</strong>
    <dd><em>ssize_t</em> <code>H5Lget_name_by_idx</code>(
        <em>hid_t</em> <code>loc_id</code>,
        <em>const char *</em><code>group_name</code>,
        <em>H5_index_t</em> <code>index_field</code>,
        <em>H5_iter_order_t</em> <code>order</code>,
        <em>hsize_t</em> <code>n</code>,
        <em>char</em> *<code>name</code>,
        <em>size_t</em> <code>size</code>,
        <em>hid_t</em> <code>lapl_id</code>
    )

  <p>
  <dt><strong>Purpose:</strong>
    <dd>Retrieves name of the <i>n</i>th link in a group, 
        according to the order within a specified field or index.

  <p>
  <dt><strong>Description:</strong>
    <dd><code>H5Lget_name_by_idx</code> retrieves the name of the <i>n</i>th 
        link in a group, according to the specified order, <code>order</code>,
        within a specified field or index, <code>index_field</code>.
        <p>
        If <code>loc_id</code> specifies the group in which the link
        resides, <code>group_name</code> can be a dot (.).
        <p>
        The size in bytes of <code>name</code> is specified in 
        <code>size</code>.
        If <code>size</code> is unknown, it can be determined via an
        initial <code>H5Lget_name_by_idx</code> call with <code>name</code>
        set to <code>NULL</code>; the function's return value will be the
        size of the name.

  <p>
  <dt><strong>Note:</strong>
    <dd>

  <p>
  <dt><strong>Parameters:</strong>
    <dd><table>
      <tr>
        <td valign="top"><em>hid_t</em> <code>loc_id</code></td>
        <td valign="top">IN: File or group identifier specifying location 
            of subject group</td></tr>
      <tr>
        <td valign="top"><em>const&nbsp;char&nbsp;*</em><code>group_name&nbsp;&nbsp;&nbsp;&nbsp;</code></td>
        <td valign="top">IN: Name of subject group</td></tr>
      <tr>
        <td valign="top"><em>H5_index_t</em> <code>index_field</code></td>
        <td valign="top">IN: Index or field which determines the 
            order</td></tr>
      <tr>
        <td valign="top"><em>H5_iter_order_t</em> <code>order</code></td>
        <td valign="top">IN: Order within field or index</td></tr>
      <tr>
        <td valign="top"><em>hsize_t</em> <code>n</code></td>
        <td valign="top">IN: Link for which to retrieve information</td></tr>
      <tr>
        <td valign="top"><em>char</em> *<code>name</code></td>
        <td valign="top">OUT: Buffer in which link value is returned</td></tr>
      <tr>
        <td valign="top"><em>size_t</em> <code>size</code></td>
        <td valign="top">IN: Size in bytes of <code>name</code></td></tr>
      <tr>
        <td valign="top"><em>hid_t</em> <code>lapl_id</code></td>
        <td valign="top">IN: Link access property list</td></tr>
    </table>

  <p>
  <dt><strong>Returns:</strong>
    <dd>Returns the size of the link name if successful;
        otherwise returns a negative value.

  <p>
  <dt><strong>Fortran90 Interface:</strong> h5lget_info_by_idx_f
    <dd>
    <pre>
SUBROUTINE h5lget_info_by_idx_f(loc_id, group_name, index_field, order, n, &
     f_corder_valid, corder, cset, data_size, hdferr, lapl_id)
  IMPLICIT NONE
  INTEGER(HID_T), INTENT(IN) :: loc_id  
                    ! File/group identifier specifying location of subject group
  CHARACTER(LEN=*), INTENT(IN) :: group_name 
                    ! Name of subject group
  INTEGER, INTENT(IN) :: index_field  
                    ! Index or field which determines the order
                    !    H5_INDEX_UNKNOWN_F   - Unknown index type
                    !    H5_INDEX_NAME_F      - Index on names
                    !    H5_INDEX_CRT_ORDER_F - Index on creation order
                    !    H5_INDEX_N_F         - Number of indices defined
  INTEGER, INTENT(IN) :: order        
                    ! Order in which to iterate over index; Possible values are:
                    !    H5_ITER_UNKNOWN_F  - Unknown order
                    !    H5_ITER_INC_F      - Increasing order
                    !    H5_ITER_DEC_F      - Decreasing order
                    !    H5_ITER_NATIVE_F   - No particular order
                    !                         whatever is fastest
    </pre>
<!-- NEW PAGE -->
    <pre>
  INTEGER(HSIZE_T), INTENT(IN) :: n   
                    ! Attribute&rsquo;s position in index
  LOGICAL, INTENT(OUT) :: f_corder_valid 
                    ! Indicates whether the creation order data is valid for 
                    ! this attribute 
  INTEGER, INTENT(OUT) :: corder 
                    ! Is a positive integer containing the creation order of the
                    ! attribute
  INTEGER, INTENT(OUT) :: cset 
                    ! Indicates the character set used for the attribute&rsquo;s name
  INTEGER(HSIZE_T), INTENT(OUT) :: data_size   
                    ! Indicates the size, in the number of characters, of 
                    ! the attribute
  INTEGER, INTENT(OUT) :: hdferr       
                    ! Error code:
                    ! 0 on success and -1 on failure
  INTEGER(HID_T), OPTIONAL, INTENT(IN) :: lapl_id  
                    ! Link access property list
END SUBROUTINE h5lget_info_by_idx_f
    </pre>

  <p>
  <dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>C</strong></td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">
            Function introduced in this release.</td></tr>
    </table>
</dl>




<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Lget_val" -->
<hr>
<dl>

  <dt><div align=right><font color=999999 size=-1><i>
      Last modified: 9 November 2009
      </i></font></div>

  <dt><strong>Name:</strong> <a name="Link-GetVal">H5Lget_val</a>
  <dt><strong>Signature:</strong>
    <dd><em>herr_t</em> <code>H5Lget_val</code>(
        <em>hid_t</em> <code>link_loc_id</code>,
        <em>const char *</em><code>link_name</code>,
        <em>void *</em><code>linkval_buff</code>,
        <em>size_t</em> <code>size</code>,
        <em>hid_t</em> <code>lapl_id</code>
    )

  <p></p>
  <dt><strong>Purpose:</strong>
    <dd>Returns the value of a symbolic link.

  <p></p>
  <dt><strong>Description:</strong>
    <dd><code>H5Lget_val</code> returns the link value of the link 
        <code>link_name</code>.  
        <p>
        The parameter <code>link_loc_id</code> is a file or group identifier.
        <p>
        <code>link_name</code> identifies a symbolic link and is defined 
        relative to <code>link_loc_id</code>.
        Symbolic links include soft and external links and some user-defined 
        links.
        This function is not for use with hard links.
        <p>
        The link value is returned in the buffer <code>linkval_buff</code>.
        For soft links, this is the path to which the link points, 
        including the null terminator; for external and user-defined links, 
        it is the link buffer.
        <p>
        <code>size</code> is the size of <code>linkval_buff</code>
        and should be the size of the link value being returned.
        This size value can be determined through a call to 
        <code>H5Lget_info</code>; it is returned in the
        <code>val_size</code> field of the <code>H5L_info_t</code> struct.
        <p>
        If <code>size</code> is smaller than the size of the returned 
        value, then the string stored in <code>linkval_buff</code> 
        will be truncated to <code>size</code> bytes.
        For soft links, this means that the value will not be null terminated. 
        <p> 
        In the case of external links, the target file and object names
        are extracted from <code>linkval_buff</code> by calling
        <a href="#Link-UnpackELinkVal"><code>H5Lunpack_elink_val</code></a>.
        <p> 
        The link class of <code>link_name</code> can be determined with a call 
        to <code>H5Lget_info</code>.
        <p>
        <code>lapl_id</code> specifies the link access property list 
        associated with the link <code>link_name</code>.
        In the general case, when default link access properties are 
        acceptable, this can be passed in as <code>H5P_DEFAULT</code>.
        An example of a situation that requires a non-default link access 
        property list is when the link is an external link; an external link 
        may require that a link prefix be set in a link access property list
        (see <a href="RM_H5P.html#Property-SetELinkPrefix">
        <code>H5Pset_elink_prefix</code></a>).
        <p>
        This function should be used only after 
        <code>H5Lget_info</code> has been called to verify that 
        <code>link_name</code> is a symbolic link.
        This can be deteremined from the <code>link_type</code> field
        of the <code>H5L_info_t</code> struct.

  <p>
  <dt><strong>Parameters:</strong>
    <dd><table>
      <tr>
        <td valign="top"><em>hid_t</em> <code>link_loc_id</code></td>
        <td valign="top">IN: File or group identifier.</td></tr>
      <tr>
        <td valign="top"><em>const&nbsp;char&nbsp;*</em><code>link_name&nbsp;&nbsp;&nbsp;&nbsp;</code></td>
        <td valign="top">IN: Link whose value is to be returned.</td></tr>
      <tr>
        <td valign="top"><em>void *</em><code>linkval_buff</code></td>
        <td valign="top">OUT: The buffer to hold the returned 
            link value.</td></tr>
      <tr>
        <td valign="top"><em>size_t</em> <code>size</code></td>
        <td valign="top">IN: Maximum number of characters of 
            link value to be returned.</td></tr>
      <tr>
        <td valign="top"><em>hid_t</em> <code>lapl_id</code></td>
        <td valign="top">IN: List access property list identifier.</td></tr>
    </table>

<!-- NEW PAGE -->

  <p>
  <dt><strong>Returns:</strong>
    <dd>Returns a non-negative value, with the link value in 
        <code>linkval_buff</code>, if successful.
        Otherwise returns a negative value.
  <p></p>
  <dt><strong>Fortran90 Interface:</strong> <!-- h5lget_val_f -->
    <dd>None.
<!--
    <pre>
SUBROUTINE h5lget_val_f(loc_id, name, size, buffer, lapl_id, hdferr)
  IMPLICIT NONE
  INTEGER(HID_T), INTENT(IN) :: loc_id         ! File or group identifier
  CHARACTER(LEN=*), INTENT(IN) :: name         ! Name of the symbolic link 
  CHARACTER(LEN=size), INTENT(OUT) :: buffer   ! Buffer to hold the link value
  INTEGER(HID_T), INTENT(IN) :: lapl_id        ! Link access property list identifier
  INTEGER, INTENT(OUT) :: hdferr               ! Error code 
                                               ! 0 on success and -1 on failure
END SUBROUTINE h5lget_val_f
    </pre>
-->

  <p></p>
  <dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>C</strong></td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">
            Function introduced in this release.</td></tr>
    </table>
</dl>




<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Lget_val_by_idx" -->
<hr>
<dl>

  <dt><div align=right><font color=999999 size=-1><i>
      Last modified: 4 December 2010
      </i></font></div>

  <dt><strong>Name:</strong> <a name="Link-GetValByIdx">H5Lget_val_by_idx</a>
  <dt><strong>Signature:</strong>
    <dd><em>herr_t</em> <code>H5Lget_val_by_idx</code>(
        <em>hid_t</em> <code>loc_id</code>,
        <em>const char *</em><code>group_name</code>,
        <em>H5_index_t</em> <code>index_type</code>,
        <em>H5_iter_order_t</em> <code>order</code>,
        <em>hsize_t</em> <code>n</code>,
        <em>void</em> *<code>link_val</code>,
        <em>size_t</em> <code>size</code>,
        <em>hid_t</em> <code>lapl_id</code>
    )
  <p>
  <dt><strong>Purpose:</strong>
    <dd>Retrieves value of the <i>n</i>th link in a group, 
        according to the order within an index.
  <p>
  <dt><strong>Description:</strong>
    <dd><code>H5Lget_val_by_idx</code> retrieves the value of the <i>n</i>th 
        link in a group, according to the specified order, <code>order</code>,
        within an index, <code>index</code>.
        <ul>
            <li>For soft links, the value is the path name 
                of the object pointed to.
            <li>For external links, this is a compound value containing 
                file and path name information; to use this external link 
                information, it must first be decoded with 
                <a href="#Link-UnpackELinkVal"><code>H5Lunpack_elink_val</code></a>
            <li>For user-defined links, this value will be described in the
                definition of the user-defined link type.
            <li>This function will fail if called on a hard link.
        </ul>
        <p>
        <code>loc_id</code> specifies the file or group in which the group 
        specified by <code>group_name</code> is located.
        <p>
        <code>group_name</code> specifies the group in which the link exists.
        If <code>loc_id</code> already specifies the group in which the link 
        exists, <code>group_name</code> must be a dot (.).
        <p>
        The size in bytes of <code>group_name</code> is specified in 
        <code>size</code>.
        If <code>size</code> is unknown, it can be determined via an
        initial <code>H5Lget_val_by_idx</code> call with <code>size</code>
        set to <code>NULL</code>; <code>size</code> will be returned with
        the actual size of <code>group_name</code>.
        <p>
        If the type of the link is unknown or uncertain,
        <code>H5Lget_val_by_idx</code> should be called only after the type
        has been determined via a call to 
        <a href="#Link-GetInfoByIdx"><code>H5Lget_info_by_idx</code></a>.
        
  <p>
  <dt><strong>Parameters:</strong>
    <dd><table>
      <tr>
        <td valign="top"><em>hid_t</em> <code>loc_id</code></td>
        <td valign="top">IN: File or group identifier specifying location 
            of subject group</td></tr>
      <tr>
        <td valign="top"><em>const&nbsp;char&nbsp;*</em><code>group_name&nbsp;&nbsp;&nbsp;&nbsp;</code></td>
        <td valign="top">IN: Name of subject group</td></tr>
      <tr>
        <td valign="top"><em>H5_index_t</em> <code>index_type</code></td>
        <td valign="top">IN: Type of index; valid values include:
            <br>
            <code>&nbsp;&nbsp;&nbsp;&nbsp;NAME&nbsp;&nbsp;&nbsp;&nbsp;</code>
            Indexed by name
            <br>
            <code>&nbsp;&nbsp;&nbsp;&nbsp;CORDER&nbsp;&nbsp;</code>
            Indexed by creation order
            </td></tr>
      <tr>
        <td valign="top"><em>H5_iter_order_t</em> <code>order</code></td>
        <td valign="top">IN: Order within field or index; valid values include:
            <br>
            <code>&nbsp;&nbsp;&nbsp;&nbsp;H5_ITER_INC&nbsp;&nbsp;&nbsp;&nbsp;</code>
            Iterate in increasing order
            <br>
            <code>&nbsp;&nbsp;&nbsp;&nbsp;H5_ITER_DEC&nbsp;&nbsp;&nbsp;&nbsp;</code>
            Iterate in decreasing order
            <br>
            <code>&nbsp;&nbsp;&nbsp;&nbsp;H5_ITER_NATIVE&nbsp;</code>
            Iterate in fastest order
            </td></tr>
      <tr>
        <td valign="top"><em>hsize_t</em> <code>n</code></td>
        <td valign="top">IN: Link for which to retrieve information</td></tr>
      <tr>
        <td valign="top"><em>void</em> *<code>link_val</code></td>
        <td valign="top">OUT: Pointer to buffer in which 
            link value is returned</td></tr>
      <tr>
        <td valign="top"><em>size_t</em> <code>size</code></td>
        <td valign="top">IN: Size in bytes of <code>group_name</code></td></tr>
      <tr>
        <td valign="top"><em>hid_t</em> <code>lapl_id</code></td>
        <td valign="top">IN: Link access property list</td></tr>
    </table>
  <p>
  <dt><strong>Returns:</strong>
    <dd>Returns a non-negative value if successful;
        otherwise returns a negative value.
  <p>
  <dt><strong>Fortran90 Interface:</strong> <!-- h5lget_info_by_idx_f -->
    <dd>None.
<!--
    <pre>
  
    </pre>
-->
        <!--<dt><strong>Non-C API(s):</strong>
    	<dd>
        
        <img src="Graphics/Java.gif"> 
        <img src="Graphics/C++.gif">
        -->
  <p>
  <dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>C</strong></td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">
            Function introduced in this release.</td></tr>
    </table>
</dl>




<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Lis_registered" -->
<hr>
<dl>
  <dt><div align=right><font color=999999 size=-1><i>
    Last modified: 10 December 2015
    </i></font></div>
  
  <dt><strong>Name:</strong> <a name="Link-IsRegistered">H5Lis_registered</a>
  <dt><strong>Signature:</strong>
    <dd><em>htri_t </em><code>H5Lis_registered</code>(
            <em>H5L_type_t</em> <code>link_cls_id</code>
        )
      <p></p>
  <dt><strong>Purpose:</strong>
    <dd>Determines whether a class of user-defined links is registered.
      <p></p>
  <dt><strong>Description:</strong>
    <dd><code>H5Lis_registered</code> tests whether a user-defined link 
      class is currently registered, either by the HDF5 Library 
      or by the user through the use of 
      <a href="#Link-Register"><code>H5Lregister</code></a>.
      <p>
      A link class must be registered to create new links of that type
      or to traverse exisitng links of that type.
      <p></p>
  <dt><strong>Parameters:</strong>
    <dd><table>
      <tr>
        <td valign="top"><em>H5L_type_t</em>&nbsp;<code>link_cls_id&nbsp;&nbsp;&nbsp;&nbsp;</code>
        </td>
        <td valign="top">IN: User-defined link class identifier
        </td></tr>
    </table>
      <p></p>
  <dt><strong>Returns:</strong>
    <dd>
        Returns a positive value if the link class has been registered.
        <br />
        Returns 0 if the link class has not been registered. 
        <br />
        Returns a negative value if the identifier is not a valid user-defined 
        class identifier or if the function fails. 
        </dd>
      <p></p>
  <dt><strong>Fortran90 Interface:</strong> H5Lis_registered_f
    <dd>
    <pre>
SUBROUTINE H5Lis_registered_f(link_cls_id, registered, hdferr)
  IMPLICIT NONE
  INTEGER, INTENT(IN) :: link_cls_id  ! User-defined link class identifier
  LOGICAL, INTENT(OUT) :: registered  ! .TRUE.  - if the link class is registered
                                      ! .FALSE. - if it is unregistered
  INTEGER, INTENT(OUT) :: hdferr      ! Error code:
                                      ! 0 on success and -1 on failure
END SUBROUTINE H5Lis_registered_f
    </pre>

 <!--<dt><strong>Non-C API(s):</strong>
    	<dd>
        
        <img src="Graphics/Java.gif"> 
        <img src="Graphics/C++.gif">
        -->
    <p></p>
<dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>C</strong></td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">
            Function introduced in this release.</td></tr>
    </table>
</dl>




<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Literate" -->
<hr>
<dl>
  <dt><div align=right><font color="999999" size=-1><i>
      Last modified: 26 September 2014
      </i></font></div>

  <dt><strong>Name:</strong> <a name="Link-Iterate">H5Literate</a>
  <dt><strong>Signature:</strong>
    <dd><em>herr_t</em> <code>H5Literate</code>(
        <em>hid_t</em> <code>group_id</code>,
        <em>H5_index_t</em> <code>index_type</code>,
        <em>H5_iter_order_t</em> <code>order</code>,
        <em>hsize_t</em> *<code>idx</code>,
        <em>H5L_iterate_t</em> <code>op</code>,
        <em>void</em> *<code>op_data</code>
    )
  <p>
  <dt><strong>Purpose:</strong>
    <dd>Iterates through links in a group.
  <p>
  <dt><strong>Description:</strong>
    <dd><code>H5Literate</code> iterates through the links 
      in a group, specified by <code>group_id</code>,
      in the order of the specified index, <code>index_type</code>,
      using a user-defined callback routine <code>op</code>.
      <code>H5Literate</code> does not recursively follow links into 
      subgroups of the specified group.
      <p>
      Three parameters are used to manage progress of the iteration:
      <code>index_type</code>, <code>order</code>, and <code>idx</code>.
      <p>
      <code>index_type</code> specifies the index to be used.
      If the links have not been indexed by the index type, they will first
      be sorted by that index then the iteration will begin; 
      if the links have been so indexed, the sorting step will be 
      unnecessary, so the iteration may begin more quickly.
      Valid values include the following:
        <table border=0>
          <tr><td>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_INDEX_NAME</code>
            </td><td valign=top>
            Alpha-numeric index on name 
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_INDEX_CRT_ORDER&nbsp;&nbsp;&nbsp;&nbsp;</code>
            </td><td valign=top>
            Index on creation order 
          <!-- H5_INDEX_N is used internally by the Library -->
          <!--
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_INDEX_N</code>
            </td><td valign=top>
            Number of indices defined
          -->
          </td></tr>
        </table>
      <p>
      <code>order</code> specifies the order in which objects are to be
      inspected along the index specified in <code>index_type</code>.  
      Valid values include the following:
        <table border=0>
          <tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_ITER_INC</code>
            </td><td valign=top>
            Increasing order 
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_ITER_DEC</code>
            </td><td valign=top>
            Decreasing order
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_ITER_NATIVE&nbsp;&nbsp;&nbsp;&nbsp;</code>
            </td><td valign=top>
            Fastest available order
          <!-- H5_INDEX_N is used internally by the Library -->
          <!--
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_ITER_N</code>
            </td><td valign=top>
            Number of iteration orders defined 
          -->
          </td></tr>
        </table>
      <p>
      <code>idx</code> allows an interrupted iteration to be resumed;
      it is passed in by the application with a starting point and 
      returned by the library with the point at which the iteration stopped. 
      <p>
      The <code>op</code> callback function, 
      the related <i>H5L_info_t</i> struct, 
      and the effect of the callback function&rsquo;s return value 
      on the application are described in
      <a href="#Link-Visit"><code>H5Lvisit</code></a>.
      <p>
      <code>op_data</code> is a user-defined pointer to the data required 
      to process links in the course of the iteration. 
      This pointer is passed back to each step of the iteration in the 
      <code>op</code> callback function&rsquo;s <code>op_data</code> parameter. 
      <p>
      As mentioned above, <code>H5Literate</code> is not recursive. 
      In particular, if a member of <code>group_id</code> is found to be 
      a group, call it <code>subgroup_a</code>, <code>H5Literate</code>
      does not examine the members of <code>subgroup_a</code>.
      When recursive iteration is required, the application can 
      do either of the following:
      <ul>
          <li>Use one of the following recursive routines instead
              of <code>H5Literate</code>:
              <br>&nbsp;&nbsp;&nbsp;&nbsp;
              <a href="#Link-Visit"><code>H5Lvisit</code></a>
              <br>&nbsp;&nbsp;&nbsp;&nbsp;
              <a href="#Link-VisitByName"><code>H5Lvisit_by_name</code></a>
              <br>&nbsp;&nbsp;&nbsp;&nbsp;
              <a href="RM_H5O.html#Object-Visit"><code>H5Ovisit</code></a>
              <br>&nbsp;&nbsp;&nbsp;&nbsp;
              <a href="RM_H5O.html#Object-VisitByName"><code>H5Ovisit_by_name</code></a>
          <li>Handle the recursion manually, explicitly calling 
          <code>H5Literate</code> on discovered subgroups.
      </ul>

<!-- NEW PAGE -->

      <p>
      <code>H5Literate</code> assumes that the membership of the group 
      being iterated over remains unchanged through the iteration;  
      if any of the links in the group change during the iteration, 
      the function&rsquo;s behavior is undefined.  
      Note, however, that objects pointed to by the links can be modified.
      <p>
      <code>H5Literate</code> is the same as deprecated function 
      <code>H5Giterate</code>, except that <code>H5Giterate</code> always 
      proceeded in alphanumeric order.

  <p>
  <dt><strong>Programming Note for C++ Developers Using C Functions:</strong>
    <dd>
      <p>If a C routine that takes a function pointer as an argument is 
      called from within C++ code, the C routine should be returned from 
      normally. </p>

      <p>Examples of this kind of routine include callbacks such as 
      <code>H5Pset_elink_cb</code> and <code>H5Pset_type_conv_cb</code> 
      and functions such as <code>H5Tconvert</code> and 
      <code>H5Ewalk2</code>.</p>

      <p>Exiting the routine in its normal fashion allows the HDF5 C 
      Library to clean up its work properly. In other words, if the C++ 
      application jumps out of the routine back to the C++ 
      &ldquo;catch&rdquo; statement, the library is not given the 
      opportunity to close any temporary data structures that were set 
      up when the routine was called. The C++ application should save 
      some state as the routine is started so that any problem that 
      occurs might be diagnosed.</p>




  <p>
  <dt><strong>Parameters:</strong>
    <dd><table>
      <tr>
        <td valign="top"><em>hid_t</em> <code>group_id</code></td>
        <td valign="top">IN: Identifier specifying subject group</td></tr>
      <tr>
        <td valign="top"><em>H5_index_t</em>&nbsp;<code>index_type&nbsp;&nbsp;&nbsp;&nbsp;</code></td>
        <td valign="top">IN: Type of index which determines the order </td></tr>
      <tr>
        <td valign="top"><em>H5_iter_order_t</em> <code>order</code></td>
        <td valign="top">IN: Order within index</td></tr>
      <tr>
        <td valign="top"><em>hsize_t *</em><code>idx</code></td>
        <td valign="top">IN: Iteration position at which to start 
            <br>
            OUT: Position at which an interrupted iteration may be restarted
            </td></tr>
      <tr>
        <td valign="top"><em>H5L_iterate_t</em> <code>op</code></td>
        <td valign="top">IN: Callback function passing data regarding the 
            link to the calling application</td></tr>
      <tr>
        <td valign="top"><em>void *</em><code>op_data</code></td>
        <td valign="top">IN: User-defined pointer to data required
            by the application for its processing of the link</td></tr>
    </table>
  <p>
  <dt><strong>Returns:</strong>
    <dd>On success, returns the return value of the first operator that
        returns a positive value, or zero if all members were processed 
        with no operator returning non-zero.
        <p>
        On failure, returns a negative value if something goes wrong within 
        the library, or the first negative value returned by an operator.

  <p>
  <dt><strong>Fortran2003 Interface:</strong> h5literate_f
    <dd>

        <a name="H5L2028F03292fh5literate5ff"></a>
<a name="robo24"></a>

<strong>Signature:</strong></p>
<pre class="source">  SUBROUTINE <strong>h5literate_f</strong>(group_id, index_type, order, idx, &amp;
            op, op_data, return_value, hdferr)
    INTEGER(HID_T)  , INTENT(IN)    :: group_id
    INTEGER         , INTENT(IN)    :: index_type
    INTEGER         , INTENT(IN)    :: order
    INTEGER(HSIZE_T), INTENT(INOUT) :: idx
    TYPE(C_FUNPTR)  , INTENT(IN)    :: op
    TYPE(C_PTR)     , INTENT(IN)    :: op_data
    INTEGER         , INTENT(OUT)   :: return_value
    INTEGER         , INTENT(OUT)   :: hdferr
</pre>
<p class="item_name"><strong>Inputs:</strong></p>
<pre>  group_id   - Identifier specifying subject group
  index_type - Type of index which determines the order:
                H5_INDEX_NAME_F      - Alpha-numeric index on name
                H5_INDEX_CRT_ORDER_F - Index on creation order
  order      - Order within index:
                H5_ITER_INC_F    - Increasing order
                H5_ITER_DEC_F    - Decreasing order
                H5_ITER_NATIVE_F - Fastest available order
  idx        - IN: Iteration position at which to start
  op         - Callback function passing data regarding the link to the 
               calling application
  op_data    - User-defined pointer to data required by the application 
               for its processing of the link
</pre>
<p class="item_name"><strong>Outputs:</strong></p>
<pre>  idx          - OUT: Position at which an interrupted iteration may 
                          be restarted
  return_value - Success: The return value of the first operator that
                          returns non-zero, or zero if all members were
                          processed with no operator returning non-zero.

                 Failure: Negative if something goes wrong within the
                          library, or the negative value returned by one
                          of the operators.

  hdferr       - Returns 0 if successful and -1 if fails
</pre>



  <br />
  <dt><strong>Programming Note for Fortran Developers:</strong>
    <dd>
      <p>The integer type of the callback function must match the C 
      integer type. Therefore, for portability, all Fortran callback 
      functions used by <code>h5literate_f</code> should be declared as 
      <code>INTEGER(KIND=C_INT)</code>.
      </p></dd>




  <p>
  <dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>Change</strong></td></tr>
        <tr>
          <td valign="top">1.8.8</td>
          <td valign="top">
            Fortran subroutine added.</td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">
            C function introduced.</td></tr>
    </table>
</dl>




<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Literate_by_name" -->
<hr>
<dl>
  <dt><div align=right><font color=999999 size=-1><i>
      Last modified: 28 March 2016
      </i></font></div>

  <dt><strong>Name:</strong> <a name="Link-IterateByName">H5Literate_by_name</a>
  <dt><strong>Signature:</strong>
    <dd><em>herr_t</em> <code>H5Literate_by_name</code>(
        <em>hid_t</em> <code>loc_id</code>,
        <em>const char *</em><code>group_name</code>,
        <em>H5_index_t</em> <code>index_type</code>,
        <em>H5_iter_order_t</em> <code>order</code>,
        <em>hsize_t</em> *<code>idx</code>,
        <em>H5L_iterate_t</em> <code>op</code>,
        <em>void</em> *<code>op_data</code>,
        <em>hid_t</em> <code>lapl_id</code>
    )
  <p>
  <dt><strong>Purpose:</strong>
    <dd>Iterates through links in a group.
  <p>
  <dt><strong>Description:</strong>
    <dd><code>H5Literate_by_name</code> iterates through the links 
      in a group, specified by <code>loc_id</code> and <code>group_name</code>,
      in the order of the specified index, <code>index_type</code>,
      using a user-defined callback routine <code>op</code>.
      <code>H5Literate_by_name</code> does not recursively follow links into 
      subgroups of the specified group.
      <p>
      <code>index_type</code> specifies the index to be used.
      If the links have not been indexed by the index type, they will first
      be sorted by that index then the iteration will begin; 
      if the links have been so indexed, the sorting step will be 
      unnecesary, so the iteration may begin more quickly.
      Valid values include the following:
        <table border=0>
          <tr><td>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_INDEX_NAME</code>
            </td><td valign=top>
            Alpha-numeric index on name 
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_INDEX_CRT_ORDER&nbsp;&nbsp;&nbsp;&nbsp;</code>
            </td><td valign=top>
            Index on creation order 
          <!-- H5_INDEX_N is used internally by the Library -->
          <!--
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_INDEX_N</code>
            </td><td valign=top>
            Number of indices defined
          -->
          </td></tr>
        </table>
      <p>
      <code>order</code> specifies the order in which objects are to be
      inspected along the index specified in <code>index_type</code>.  
      Valid values include the following:
        <table border=0>
          <tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_ITER_INC</code>
            </td><td valign=top>
            Increasing order 
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_ITER_DEC</code>
            </td><td valign=top>
            Decreasing order
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_ITER_NATIVE&nbsp;&nbsp;&nbsp;&nbsp;</code>
            </td><td valign=top>
            Fastest available order
          <!-- H5_INDEX_N is used internally by the Library -->
          <!--
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_ITER_N</code>
            </td><td valign=top>
            Number of iteration orders defined 
          -->
          </td></tr>
        </table>
      <p>
      <code>idx</code> allows an interrupted iteration to be resumed;
      it is passed in by the application with a starting point and 
      returned by the library with the point at which the iteration stopped. 
      <p>
      <code>H5Literate_by_name</code> is not recursive. 
      In particular, if a member of <code>group_name</code> is found to be 
      a group, call it <code>subgroup_a</code>, <code>H5Literate_by_name</code>
      does not examine the members of <code>subgroup_a</code>.
      When recursive iteration is required, the application must handle 
      the recursion, explicitly calling <code>H5Literate_by_name</code> 
      on discovered subgroups.
      <p>
      <code>H5Literate_by_name</code> assumes that the membership of the group 
      being iterated over remains unchanged through the iteration;  
      if any of the links in the group change during the iteration, 
      the function&rsquo;s behavior is undefined.  
      Note, however, that objects pointed to by the links can be modified.
      <p>
      <code>H5Literate_by_name</code> is the same as <code>H5Giterate</code>,
      except that <code>H5Giterate</code> always proceeds in alphanumeric 
      order.


  <p>
  <dt><strong>Programming Note for C++ Developers Using C Functions:</strong>
    <dd>
      <p>If a C routine that takes a function pointer as an argument is 
      called from within C++ code, the C routine should be returned from 
      normally. </p>

      <p>Examples of this kind of routine include callbacks such as 
      <code>H5Pset_elink_cb</code> and <code>H5Pset_type_conv_cb</code> 
      and functions such as <code>H5Tconvert</code> and 
      <code>H5Ewalk2</code>.</p>

      <p>Exiting the routine in its normal fashion allows the HDF5 C 
      Library to clean up its work properly. In other words, if the C++ 
      application jumps out of the routine back to the C++ 
      &ldquo;catch&rdquo; statement, the library is not given the 
      opportunity to close any temporary data structures that were set 
      up when the routine was called. The C++ application should save 
      some state as the routine is started so that any problem that 
      occurs might be diagnosed.</p>



  <p>
  <dt><strong>Parameters:</strong>
    <dd><table>
      <tr>
        <td valign="top"><em>hid_t</em> <code>loc_id</code></td>
        <td valign="top">IN: File or group identifier specifying location 
            of subject group</td></tr>
      <tr>
        <td valign="top"><em>const&nbsp;char&nbsp;*</em><code>group_name&nbsp;&nbsp;&nbsp;&nbsp;</code></td>
        <td valign="top">IN: Name of subject group</td></tr>
      <tr>
        <td valign="top"><em>H5_index_t</em> <code>index_type</code></td>
        <td valign="top">IN: Type of index which determines the order </td></tr>
      <tr>
        <td valign="top"><em>H5_iter_order_t</em> <code>order</code></td>
        <td valign="top">IN: Order within index</td></tr>
      <tr>
        <td valign="top"><em>hsize_t *</em><code>idx</code></td>
        <td valign="top">IN: Iteration position at which to start 
            <br>
            OUT: Position at which an interrupted iteration may be restarted
            </td></tr>

<!-- NEW PAGE -->

      <tr>
        <td valign="top"><em>H5L_iterate_t</em> <code>op</code></td>
        <td valign="top">IN: Callback function passing data regarding the 
            link to the calling application</td></tr>
      <tr>
        <td valign="top"><em>void *</em><code>op_data</code></td>
        <td valign="top">IN: User-defined pointer to data required
            by the application for its processing of the link</td></tr>
      <tr>
        <td valign="top"><em>hid_t</em> <code>lapl_id</code></td>
        <td valign="top">IN: Link access property list</td></tr>
    </table>
  <p>
  <dt><strong>Returns:</strong>
    <dd>On success, returns the return value of the first operator that
        returns a positive value, or zero if all members were processed 
        with no operator returning non-zero.
        <p>
        On failure, returns a negative value if something goes wrong within 
        the library, or the first negative value returned by an operator.

  <p>
  <dt><strong>Fortran2003 Interface:</strong> h5literate_by_name_f
    <dd>

        <a name="H5L2028F03292fh5literate5fby5fname5ff"></a>
<a name="robo23"></a>

<strong>Signature:</strong></p>
<pre class="source">  SUBROUTINE <strong>h5literate_by_name_f</strong>(loc_id, group_name, index_type, &amp;
            order, idx, op, op_data, return_value, hdferr, lapl_id)
    INTEGER(HID_T), INTENT(IN) :: loc_id
    CHARACTER(LEN=*) :: group_name 
    INTEGER, INTENT(IN) :: index_type
    INTEGER, INTENT(IN) :: order
    INTEGER(HSIZE_T), INTENT(INOUT) :: idx

    TYPE(C_FUNPTR):: op  
    TYPE(C_PTR)   :: op_data

    INTEGER, INTENT(OUT) :: return_value

    INTEGER, INTENT(OUT) :: hdferr
    INTEGER(HID_T), OPTIONAL, INTENT(IN) :: lapl_id
</pre>
<p class="item_name"><strong>Inputs:</strong></p>
<pre>  loc_id     - File or group identifier specifying location of subject group
  group_name - Name of subject group
  index_type - Type of index which determines the order:
                H5_INDEX_NAME_F      - Alpha-numeric index on name
                H5_INDEX_CRT_ORDER_F - Index on creation order
  order      - Order within index:
                H5_ITER_INC_F    - Increasing order
                H5_ITER_DEC_F    - Decreasing order
                H5_ITER_NATIVE_F - Fastest available order
  idx        - IN: Iteration position at which to start
  op         - Callback function passing data regarding the link to the 
               calling application
  op_data    - User-defined pointer to data required by the application for 
               its processing of the link
</pre>
<p class="item_name"><strong>Outputs:</strong></p>
<pre>  idx          - OUT: Position at which an interrupted iteration 
                          may be restarted
  return_value - Success: The return value of the first operator that
                          returns non-zero, or zero if all members were
                          processed with no operator returning non-zero.

                 Failure: Negative if something goes wrong within the
                          library, or the negative value returned by one
                          of the operators.

  hdferr        - Returns 0 if successful and -1 if fails
</pre>
<p class="item_name"><strong>Optional parameters:</strong></p>
<pre>  lapl_id    - Link access property list
</pre>



  <br />
  <dt><strong>Programming Note for Fortran Developers:</strong>
    <dd>
      <p>The integer type of the callback function must match the C 
      integer type. Therefore, for portability, all Fortran callback 
      functions used by <code>h5literate_by_name_f</code> should be declared as 
      <code>INTEGER(KIND=C_INT)</code>.
      </p></dd>


  <p>
  <dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>Change</strong></td></tr>
        <tr>
          <td valign="top">1.8.8</td>
          <td valign="top">
            Fortran subroutine added.</td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">
            C function introduced.</td></tr>
    </table>
</dl>




<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Lmove" -->
<hr>
<dl>

  <dt><div align=right><font color=999999 size=-1><i>
      Last modified: 2 July 2012
      </i></font></div>

  <dt><strong>Name:</strong> <a name="Link-Move">H5Lmove</a> 

  <dt><strong>Signature:</strong> 
  <dd><em>herr_t</em> <code>H5Lmove</code>( 
      <em>hid_t</em> <code>src_loc_id</code>, 
      <em>const char *</em><code>src_name</code>, 
      <em>hid_t</em> <code>dest_loc_id</code>, 
      <em>const char *</em><code>dest_name</code>, 
      <em>hid_t</em> <code>lcpl_id</code>, 
      <em>hid_t</em> <code>lapl_id</code> 
      )

      <p></p>
  <dt><strong>Purpose:</strong> 
  <dd>Moves a link within an HDF5 file. 

      <p></p>
  <dt><strong>Description:</strong> 
  <dd><code>H5Lmove</code> moves a link within an HDF5 file. 
      The original link, <code>src_name</code>, 
      is removed from <code>src_loc_id</code> and 
      the new link, <code>dest_name</code>, 
      is inserted at <code>dest_loc_id</code>.
      This change is accomplished as an atomic operation. 
      <p>
      <code>src_loc_id</code> and <code>src_name</code> identify the 
      original link.  
      <code>src_loc_id</code> is either a file or group identifier;
      <code>src_name</code> is the path to the link and is interpreted
      relative to <code>src_loc_id</code>.
      <p>
      <code>dest_loc_id</code> and <code>dest_name</code> identify the 
      new link.  
      <code>dest_loc_id</code> is either a file or group identifier;
      <code>dest_name</code> is the path to the link and is interpreted
      relative to <code>dest_loc_id</code>.
      <p>
      Note that <code>H5Lmove</code> does not modify the value of the link;
      the new link points to the same object as the original link pointed to.
      Furthermore, if the object pointed to by the original link 
      was already open with a valid object identifier, 
      that identifier will remain valid after the call to 
      <code>H5Lmove</code>. 
      <p>
      <code>lcpl_id</code> and <code>lapl_id</code> are the link creation 
      and link access property lists, respectively, associated with
      the new link, <code>dest_name</code>.
      <p>
      Through these property lists, several properties are available to 
      govern the behavior of <code>H5Lmove</code>.
      The property controlling creation of missing intermediate groups 
      is set in the link creation property list with 
      <a href="RM_H5P.html#Property-SetCreateIntermediateGroup">
          <code>H5Pset_create_intermediate_group</code></a>; 
      <code>H5Lmove</code> ignores any other properties in the link creation 
      property list.
      Properties controlling character encoding, link traversals, and
      external link prefixes are set in the link access property list with 
      <a href="RM_H5P.html#Property-SetCharEncoding">
          <code>H5Pset_char_encoding</code></a>,
      <a href="RM_H5P.html#Property-SetNLinks">
          <code>H5Pset_nlinks</code></a>, and
      <a href="RM_H5P.html#Property-SetELinkPrefix">
          <code>H5Pset_elink_prefix</code></a>, respectively.

      <p></p>
  <dt><strong>Warning:</strong> 
  <dd>Exercise care in moving links as it is possible to render data in 
      a file inaccessible with <code>H5Lmove</code>. 
      If the link being moved is on the only path leading to an HDF5 object, 
      that object may become permanently inaccessible in the file.

      <p><p>
  <dt><strong>Parameters:</strong> 
    <dd><table>
      <tr>
        <td valign="top"><em>hid_t</em> <code>src_loc_id</code></td> 
        <td valign="top">IN: Original file or group identifier.</td></tr>
      <tr>
        <td valign="top"><em>const&nbsp;char</em>&nbsp;<code>*src_name&nbsp;&nbsp;&nbsp;&nbsp;</code></td> 
        <td valign="top">IN: Original link name.</td></tr>
      <tr>
        <td valign="top"><em>hid_t</em> <code>dest_loc_id</code></td> 
        <td valign="top">IN: Destination file or group identifier.</td></tr>
      <tr>
        <td valign="top"><em>const char</em> <code>*dest_name</code></td> 
        <td valign="top">IN: New link name.</td></tr>
      <tr>
        <td valign="top"><em>hid_t</em> <code>lcpl_id</code></td> 
        <td valign="top">IN: Link creation property list identifier 
            to be associated with the new link.</td></tr>
      <tr>
        <td valign="top"><em>hid_t</em> <code>lapl_id</code></td> 
        <td valign="top">IN: Link access property list identifier 
            to be associated with the new link.</td></tr>
    </table>

      <p></p>
  <dt><strong>Returns:</strong> 
  <dd>Returns a non-negative value if successful; otherwise returns a negative 
    value. 

      <p></p>
  <dt><strong>Fortran90 Interface:</strong> h5lmove_f
    <dd>
    <pre>
SUBROUTINE h5lmove_f(src_loc_id, src_name, dest_loc_id, dest_name, hdferr, &
    lcpl_id, lapl_id)
  IMPLICIT NONE
  INTEGER(HID_T), INTENT(IN) :: src_loc_id  
                                        ! Original file or group identifier.
  CHARACTER(LEN=*), INTENT(IN) :: src_name  
                                        ! Original link name.
  INTEGER(HID_T), INTENT(IN) :: dest_loc_id 
                                        ! Destination file or group identifier.
  CHARACTER(LEN=*), INTENT(IN) :: dest_name 
                                        ! New link name.
  INTEGER(HID_T), INTENT(OUT) :: hdferr ! Error code:
                                        ! 0 on success and -1 on failure
  INTEGER(HID_T), OPTIONAL, INTENT(IN) :: lcpl_id 
                                        ! Link creation property list identifier 
                                        ! to be associated with the new link.
  INTEGER(HID_T), OPTIONAL, INTENT(IN) :: lapl_id 
                                        ! Link access property list identifier 
                                        ! to be associated with the new link.
END SUBROUTINE h5lmove_f
    </pre>

<p></p>
<dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
    	  <td valign="top" align="left" width="10%">
    	    <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
    	    <strong>C</strong></td></tr>
        <tr>
    	  <td valign="top">1.8.0</td>
          <td valign="top">
    	    Function introduced in this release.</td></tr>
    </table>
</dl>




<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Lregister" -->
<hr>
<dl>

  <dt><div align=right><font color=999999 size=-1><i>
      Last modified: 21 August 2013
      </i></font></div>

  <dt><strong>Name:</strong> <a name="Link-Register">H5Lregister</a>
  <dt><strong>Signature:</strong>
    <dd><em>herr_t </em><code>H5Lregister</code>(
            <em>const H5L_class_t *</em> <code>link_class</code>
        )

      <p></p>
  <dt><strong>Purpose:</strong>
    <dd>Registers a user-defined link class or 
      changes behavior of an existing class.

      <p></p>
  <dt><strong>Description:</strong>
    <dd><code>H5Lregister</code> registers a class of user-defined links, 
      or changes the behavior of an existing class.
      <p>
      <code>link_class</code> is a pointer to a buffer containing
      a copy of the <code>H5L_class_t</code> struct.
      This struct is defined in <code>H5Lpublic.h</code> as follows:
      <pre>
  typedef struct H5L_class_t {
      int version;                    /* Version number of this struct  */
      H5L_type_t class_id;            /* Link class identifier          */
      const char *comment;            /* Comment for debugging          */
      H5L_create_func_t create_func;  /* Callback during link creation  */
      H5L_move_func_t move_func;      /* Callback after moving link     */
      H5L_copy_func_t copy_func;      /* Callback after copying link    */
      H5L_traverse_func_t trav_func;  /* The main traversal function    */
      H5L_delete_func_t del_func;     /* Callback for link deletion     */
      H5L_query_func_t query_func;    /* Callback for queries           */
  } H5L_class_t;
      </pre>

      <p>
    <dd>The class definition passed with <code>link_class</code> must include 
      at least the following:
      <ul>
          <li>An <code>H5L_class_t</code> version 
              (which should be <code>H5L_LINK_CLASS_T_VERS</code>) 
          <li>A link class identifier, <code>class_id</code>
          <li>A traversal function, <code>trav_func</code>
      </ul>
      Remaining struct members are optional and may be passed as 
      <code>NULL</code>.

      <p>
      The link class passed in <code>class_id</code> 
      must be in the user-definable range between
      <code>H5L_TYPE_UD_MIN</code> and <code>H5L_TYPE_UD_MAX</code>
      (see the &ldquo;Link Class Identifiers...&rdquo; table below)
      and will override any existing link class with that identifier.

      <p>
      As distributed, valid values of <code>class_id</code> used in HDF5 
      include the following (defined in <code>H5Lpublic.h</code>):
        <table border=0>
          <tr><td width=5%>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td width=20%>
            <code>H5L_TYPE_HARD</code>
            </td><td>
            Hard link
          </td></tr><tr><td>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td>
            <code>H5L_TYPE_SOFT</code>
            </td><td>
            Soft link
          </td></tr><tr><td>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td>
            <code>H5L_TYPE_EXTERNAL&nbsp;&nbsp;&nbsp;&nbsp;</code>
            </td><td>
            External link
          </td></tr>
        </table>
      The hard and soft link class identifiers cannot be modified or 
      reassigned, but the external link class is implemented as an example 
      in the user-definable link class identifier range. 
      <code>H5Lregister</code> is used to register additional link classes.
      It could also be used to modify the behavior of the external link 
      class, though that is <i>not</i> recommended.
      <p>
      The following table summarizes existing link types and 
      values and the reserved and user-definable link class identifier
      value ranges. 
      <p></p>

      <table align="center" border="0">
      <tr><th align="center">
          Link Class Identifiers or Value Ranges,
          <br>Descriptions, and Class Names

      <table border="1">
      <tr><td>
      <table border="0">
      <tr>
          <th align="left" valign="bottom">
              Link class identifier<br>
              or Value range
              </th>
          <th><code>&nbsp;&nbsp;</code></th>
          <th align="left" valign="bottom">
              Description
              </th>
          <th><code>&nbsp;&nbsp;</code></th>
          <th align="left" valign="bottom">
              Link class or<br>
              other label
              </th>
           </tr>
      <tr>
          <td align="center" colspan="5">
              <hr size="1">
              </td>
          </tr>
<!--
      <tr>
          <td align="left" valign="top">
              <code>0</code>&nbsp;
              </td>
          <td><code>&nbsp;</code></td>
          <td align="left" valign="top">
              Hard link
              </td>
          <td><code>&nbsp;</code></td>
          <td align="left" valign="top">
              <code>H5L_TYPE_HARD</code>&nbsp;
              </td>
          </tr>
      <tr>
          <td align="left" valign="top">
              <code>1</code>&nbsp;
              </td>
          <td><code>&nbsp;</code></td>
          <td align="left" valign="top">
              Soft link
              </td>
          <td><code>&nbsp;</code></td>
          <td align="left" valign="top">
              <code>H5L_TYPE_SOFT</code>&nbsp;
              </td>
          </tr>
-->
      <tr>
          <td align="left" valign="top">
              <code>0</code> &nbsp;to&nbsp; <code>63</code>
              </td>
          <td><code>&nbsp;</code></td>
          <td align="left" valign="top">
              Reserved range
              </td>
          <td><code>&nbsp;</code></td>
          <td align="left" valign="top">
              &nbsp;
              </td>
          </tr>
      <tr>
          <td align="left" valign="top">
              <code>64</code> &nbsp;to&nbsp; <code>255</code>
              </td>
          <td><code>&nbsp;</code></td>
          <td align="left" valign="top">
              User-definable range
              </td>
          <td><code>&nbsp;</code></td>
          <td align="left" valign="top">
              &nbsp;
              </td>
          </tr>

      <tr>
          <td align="center" colspan="5">
              <hr size="1" width=30%>
              </td>
          </tr>

      <tr>
          <td align="left" valign="top">
              <code>64</code>&nbsp;
              </td>
          <td><code>&nbsp;</code></td>
          <td align="left" valign="top">
              Minimum user-defined value
              </td>
          <td><code>&nbsp;</code></td>
          <td align="left" valign="top">
              <code>H5L_TYPE_UD_MIN</code>&nbsp;
              </td>
          </tr>
      <tr>
          <td align="left" valign="top">
              <code>64</code>&nbsp;
              </td>
          <td><code>&nbsp;</code></td>
          <td align="left" valign="top">
              External link
              </td>
          <td><code>&nbsp;</code></td>
          <td align="left" valign="top">
              <code>H5L_TYPE_EXTERNAL</code>&nbsp;
              </td>
          </tr>
      <tr>
          <td align="left" valign="top">
              <code>255</code>&nbsp;
              </td>
          <td><code>&nbsp;</code></td>
          <td align="left" valign="top">
              Maximum user-defined value
              </td>
          <td><code>&nbsp;</code></td>
          <td align="left" valign="top">
              <code>H5L_TYPE_UD_MAX</code>&nbsp;
              </td>
          </tr>
      <tr>
          <td align="left" valign="top">
              <code>255</code>&nbsp;
              </td>
          <td><code>&nbsp;</code></td>
          <td align="left" valign="top">
              Maximum value
              </td>
          <td><code>&nbsp;</code></td>
          <td align="left" valign="top">
              <code>H5L_TYPE_MAX</code>&nbsp;
              </td>
          </tr>

      <tr>
          <td align="center" colspan="5">
              <hr size="1" width=30%>
              </td>
          </tr>

      <tr>
          <td align="left" valign="top">
              <code>-1</code>&nbsp;
              </td>
          <td><code>&nbsp;</code></td>
          <td align="left" valign="top">
              Error
              </td>
          <td><code>&nbsp;</code></td>
          <td align="left" valign="top">
              <code>H5L_TYPE_ERROR</code>&nbsp;
              </td>
          </tr>
      </table>
      </td></tr>
      </table>

      </th></tr>
      </table>

      <p>
      Note that HDF5 internally registers user-defined link classes only 
      by the numeric value of the link class identifier.
      An application, on the other hand, will generally use a name for a 
      user-defined class, if for no other purpose than as a variable name.
      Assume, for example, that a complex link type is registered 
      with the link class identifier <code>73</code> 
      and that the code includes the following assignment:
      <br>
      <code>&nbsp;&nbsp;&nbsp;&nbsp;
          H5L_TYPE_COMPLEX_A = 73</code>
      <br>
      The application can refer to the link class with a term,
      <code>H5L_TYPE_COMPLEX_A</code>, that conveys meaning 
      to a human reviewing the code, while HDF5 recognizes it 
      by the more cryptic numeric identifier, <code>73</code>.


<!--
      HDF5, on the other hand, registers the user-definable link class 
      strictly by the numeric value of the link class identifier 
      and makes no record of the name.
<p>
      User-defined link classes are registered strictly by
      the numeric value of the link class identifier 
      (for example, the numeric value for <code>H5L_TYPE_EXTERNAL</code>
      is <code>64</code>).
      While it is generally useful for an application registering 
      a user-defined class to it assign a name, such as 
      <code>H5L_TYPE_MY_ODDBALL_LINK_CLASS</code>,
      HDF5 itself registers the user-definable link class 
      by the numeric value of the link class identifier 
      and makes no record of the name.
-->



      <p>
  <dt><strong>Critical Notes:</strong>
    <dd>Important details and considerations include the following:
      <ul>
        <li>If you plan to distribute files or software with 
            a user-defined link class, please contact the Help Desk 
            at The HDF Group to help prevent collisions between 
            <code>class_id</code> values.
            <a href="#Registry">See below</a>.
        <li>As distributed with HDF5, 
            the external link class is implemented as an example of a 
            user-defined link class with <code>H5L_LINK_EXTERNAL</code> 
            equal to <code>H5L_LINK_UD_MIN</code>.  
            <code>class_id</code> in the <code>H5L_class_t</code> struct
            must not equal <code>H5L_LINK_UD_MIN</code> unless you intend to 
            overwrite or modify the behavior of external links.
        <li><code>H5Lregister</code> can be used only with 
            link class identifiers in the user-definable range 
            (see table above).
        <li>The hard and soft links defined by the HDF5 Library,
            <code>H5L_TYPE_HARD</code> and <code>H5L_TYPE_SOFT</code>,
            reside in the reserved range below <code>H5L_TYPE_UD_MIN</code>
            and cannot be redefined or modified.
        <li><a href="#Link-IsRegistered"><code>H5Lis_registered</code></a> 
            can be used to determine whether a desired link class identifier 
            is available.
            <br>
            <i>Note that this function will tell you only whether the
            link class identifier has been registered with the installed 
            copy of HDF5; it cannot tell you whether the link class 
            has been registered with The HDF Group.</i>
            <br>&nbsp;

        <li><code>H5L_TYPE_MAX</code> is the maximum allowed value for a
            link type identifier. 
        <li><code>H5L_TYPE_UD_MIN</code> equals <code>H5L_TYPE_EXTERNAL</code>.
        <li><code>H5L_TYPE_UD_MAX</code> equals <code>H5L_TYPE_MAX</code>.
        <li><code>H5L_TYPE_ERROR</code> indicates that an error has occurred.
      </ul>

      <p></p>
  <dt><strong>Parameters:</strong>
    <dd><table>
      <tr>
        <td valign="top"><em>const&nbsp;H5L_class_t&nbsp;*</em><code>link_class&nbsp;&nbsp;&nbsp;&nbsp;</code>
        </td>
        <td valign="top">IN: Pointer to a buffer containing 
           the struct describing the user-defined link class
        </td></tr>
    </table>

      <p></p>
  <dt><strong>Returns:</strong>
    <dd>Returns a non-negative value if successful;
        otherwise returns a negative value.

      <p></p>
  <dt><strong>Fortran90 Interface:</strong> <!--h5l***_f-->
    <dd>
      None.
<!--
    <pre>

    </pre>
-->

    <a name="Registry">
    <p></p>
    </a>
<dt><strong>Registration with The HDF Group:</strong>
    <dd>There are sometimes reasons to take a broader approach to 
      registering a user-defined link class than just invoking 
      <code>H5Lregister</code>. For example:
      <ul> 
        <li>A user-defined link class is intended for use 
            across an organization, 
            among collaborators, or
            across a community of users.
        <li>An application or library overlying HDF5 invokes
            a user-defined link class that must be shipped with the software.
        <li>Files are distributed that make use of a user-defined link class.
        <li>Or simply, a specific user-defined link class 
            is thought to be widely useful.
      </ul>
      <p>
      In such cases, you are encouraged to register that link class
      with The HDF Group&rsquo;s Helpdesk
      (<a href="http://www.hdfgroup.org/about/contact.html/">contact</a>).
      The HDF Group maintains a registry of known user-defined
      link classes and tracks the selected link class identifiers.
      This registry is intended to reduce the risk of collisions 
      between <code>class_id</code> values and to help coordinate the 
      use of specialized link classes.

    <p></p>
<dt><strong>See Also:</strong>
    <dd><a href="#Link-IsRegistered"><code>H5Lis_registered</code></a> 

    <p></p>
<dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>C</strong></td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">
            Function introduced in this release.</td></tr>
    </table>
</dl>




<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Lunpack_elink_val" -->
<hr>
<dl>

  <dt><div align=right><font color=999999 size=-1><i>
      Last modified: 11 January 2010
      </i></font></div>

  <dt><strong>Name:</strong> <a name="Link-UnpackELinkVal">H5Lunpack_elink_val</a>
  <dt><strong>Signature:</strong>
    <dd><em>herr_t </em><code>H5Lunpack_elink_val</code>(
            <em>char *</em><code>ext_linkval</code>,
            <em>size_t</em> <code>link_size</code>,
            <em>unsigned</em> *<code>flags</code>,
            <em>const char **</em><code>filename</code>,
            <em>const char **</em><code>obj_path</code>
        )
      <p></p>
  <dt><strong>Purpose:</strong>
    <dd>Decodes external link information.
      <p></p>
  <dt><strong>Description:</strong>
    <dd><code>H5Lunpack_elink_val</code> decodes the external link 
      information returned by <code>H5Lget_val</code> in 
      the <code>ext_linkval</code> buffer.
      <p>
      <code>ext_linkval</code> should be the buffer set by
      <a href="#Link-GetVal"><code>H5Lget_val</code></a>
      and will consist of two <small>NULL</small>-terminated strings, 
      the filename and object path, one after the other.
      <p>
      Given this buffer, <code>H5Lunpack_elink_val</code> creates
      pointers to the filename and object path within the buffer 
      and returns them in <code>filename</code> and <code>obj_path</code>,
      unless they are passed in as <small>NULL</small>.
      <p>
      <code>H5Lunpack_elink_val</code> requires that <code>ext_linkval</code> 
      contain a concatenated pair of null-terminated strings, so use of 
      this function on a string that is not an external link 
      <code>udata</code> buffer may result in a segmentation fault. 
      This failure can be avoided by adhering to the following procedure:
      <ol>
          <li>Call <code>H5Lget_info</code> to get the link type 
              and the size of the link value.
          <li>Verify that the link is an external link, i.e., that its
              link type is <code>H5L_TYPE_EXTERNAL</code>.
          <li>Call <code>H5Lget_val</code> to get the link value.
          <li>Call <code>H5Lunpack_elink_val</code> to unpack that value.
      </ol>
      <p>
  <dt><strong>Parameters:</strong>
    <dd><table>
      <tr>
      <tr>
        <td valign="top"><em>const&nbsp;char&nbsp;*</em><code>ext_linkval&nbsp;&nbsp;&nbsp;&nbsp;</code>
        </td>
        <td valign="top">IN: Buffer containing external link information
        </td></tr>
        </td></tr>
      <tr>
        <td valign="top"><em>size_t</em> <code>link_size</code>
        </td>
        <td valign="top">IN: Size, in bytes, of the <code>ext_linkval</code>
            buffer
        </td></tr>
      <tr>
        <td valign="top"><em>unsigned *</em><code>flags</code>
        </td>
        <td valign="top">OUT: External link flags, packed as a bitmap
	    <br>
	    <i>(Reserved as a bitmap for flags; 
	    no flags are currently defined, so the only valid value is 0.)</i>
        </td></tr>
      <tr>
        <td valign="top"><em>const char **</em><code>filename</code>
        </td>
        <td valign="top">OUT: Returned filename 
        </td></tr>
      <tr>
        <td valign="top"><em>const char **</em><code>obj_path</code>
        </td>
        <td valign="top">OUT: Returned object path, relative to 
            <code>filename</code>
        </td></tr>
    </table>
      <p></p>
  <dt><strong>Returns:</strong>
    <dd>Returns a non-negative value if successful;
        otherwise returns a negative value.
      <p></p>
  <dt><strong>Fortran90 Interface:</strong> <!--h5l***_f-->
    <dd>
      None.
<!--
    <pre>

    </pre>
-->

    <p></p>
<dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>C</strong></td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">
            Function introduced in this release.</td></tr>
    </table>
</dl>




<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Lunregister" -->
<hr>
<dl>
  <dt><strong>Name:</strong> <a name="Link-Unregister">H5Lunregister</a>
  <dt><strong>Signature:</strong>
    <dd><em>herr_t </em><code>H5Lunregister</code>(
            <em>H5L_type_t</em> <code>link_cls_id</code>
        )
      <p></p>
  <dt><strong>Purpose:</strong>
    <dd>Unregisters a class of user-defined links.
      <p></p>
  <dt><strong>Description:</strong>
    <dd><code>H5Lunregister</code> unregisters a class of user-defined links, 
      preventing them from being traversed, queried, moved, etc.
      <p>
      A link class can be re-registered using <code>H5Lregister</code>.
      <p></p>
  <dt><strong>Parameters:</strong>
    <dd><table>
      <tr>
        <td valign="top"><em>H5L_type_t</em>&nbsp;<code>link_cls_id&nbsp;&nbsp;&nbsp;&nbsp;</code>
        </td>
        <td valign="top">IN: User-defined link class identifier
        </td></tr>
    </table>
      <p></p>
  <dt><strong>Returns:</strong>
    <dd>Returns a non-negative value if successful;
        otherwise returns a negative value.
      <p></p>
  <dt><strong>Fortran90 Interface:</strong> <!--h5l***_f-->
    <dd>
      None.
<!--
    <pre>

    </pre>
-->

 <!--<dt><strong>Non-C API(s):</strong>
    	<dd>
        
        <img src="Graphics/Java.gif"> 
        <img src="Graphics/C++.gif">
        -->
    <p></p>
<dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>C</strong></td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">
            Function introduced in this release.</td></tr>
    </table>
</dl>




<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Lvisit" -->
<hr>
<dl>

  <dt><div align=right><font color=999999 size=-1><i>
      Last modified: 24 August 2012
      </i></font></div>

  <dt><strong>Name:</strong> <a name="Link-Visit">H5Lvisit</a>
  <dt><strong>Signature:</strong>
    <dd><em>herr_t</em> <code>H5Lvisit</code>(
            <em>hid_t</em> <code>group_id</code>,
            <em>H5_index_t</em> <code>index_type</code>, 
            <em>H5_iter_order_t</em> <code>order</code>, 
            <em>H5L_iterate_t</em> <code>op</code>,
            <em>void *</em><code>op_data</code>
        )
  <p>
  <dt><strong>Purpose:</strong>
    <dd>Recursively visits all links starting from a specified group.
  <p>
  <dt><strong>Description:</strong>
    <dd><code>H5Lvisit</code> is a recursive iteration function 
      to visit all links in and below a group in an HDF5 file,
      thus providing a mechanism for an application to perform
      a common set of operations across all of those links 
      or a dynamically selected subset.
      For non-recursive iteration across the members of a group, 
      see <a href="#Link-Iterate"><code>H5Literate</code></a>.
      <p>
      The group serving as the root of the iteration is specified by 
      its group identifier, <code>group_id</code>.
      <p>
      Two parameters are used to establish the iteration:
      <code>index_type</code> and <code>order</code>.
      <p>
      <code>index_type</code> specifies the index to be used.
      If the links have not been indexed by the index type, they will first
      be sorted by that index then the iteration will begin; 
      if the links have been so indexed, the sorting step will be 
      unnecesary, so the iteration may begin more quickly.
      Valid values include the following:
        <table border=0>
          <tr><td>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_INDEX_NAME</code>
            </td><td valign=top>
            Alpha-numeric index on name 
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_INDEX_CRT_ORDER&nbsp;&nbsp;&nbsp;&nbsp;</code>
            </td><td valign=top>
            Index on creation order 
          <!-- H5_INDEX_N is used internally by the Library -->
          <!--
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_INDEX_N</code>
            </td><td valign=top>
            Number of indices defined
          -->
          </td></tr>
        </table>
      <p>
      Note that the index type passed in <code>index_type</code> is a 
      <i>best effort</i> setting.  
      If the application passes in a value indicating iteration in 
      creation order and a group is encountered that was not tracked
      in creation order, that group will be iterated over in 
      alpha-numeric order by name, or <i>name order</i>.
      (<i>Name order</i> is the native order used by the HDF5 Library
      and is always available.)
      <p>
      <code>order</code> specifies the order in which objects are to be
      inspected along the index specified in <code>index_type</code>.  
      Valid values include the following:
        <table border=0>
          <tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_ITER_INC</code>
            </td><td valign=top>
            Increasing order 
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_ITER_DEC</code>
            </td><td valign=top>
            Decreasing order
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_ITER_NATIVE&nbsp;&nbsp;&nbsp;&nbsp;</code>
            </td><td valign=top>
            Fastest available order
          <!-- H5_INDEX_N is used internally by the Library -->
          <!--
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_ITER_N</code>
            </td><td valign=top>
            Number of iteration orders defined 
          -->
          </td></tr>
        </table>

      <p>
      The protoype of the callback function <code>op</code> is as follows
      (as defined in the source code file <code>H5Lpublic.h</code>):
      <dir>
          <em>herr_t</em> <code>(*H5L_iterate_t)(</code>
              <em>hid_t</em> <code>g_id,</code> 
              <em>const char *</em><code>name,</code> 
              <em>const H5L_info_t *</em><code>info,</code> 
              <em>void *</em><code>op_data)</code>
      </dir>
      <p>
      The parameters of this callback function have the following
      values or meanings: 
      <table>
          <tr valign=top><td><code>&nbsp;&nbsp;&nbsp;&nbsp;</code></td><td>
              <code>g_id</code>
              </td><td>
              Group that serves as root of the iteration; same value 
              as the <code>H5Lvisit</code> <code>group_id</code> parameter
              </td></tr>
          <tr valign=top><td><code>&nbsp;&nbsp;&nbsp;&nbsp;</code></td><td>
              <code>name</code>
              </td><td>
              Name of link, relative to <code>g_id</code>,
              being examined at current step of the iteration
              </td></tr>
          <tr valign=top><td><code>&nbsp;&nbsp;&nbsp;&nbsp;</code></td><td>
              <code>info</code>
              </td><td>
              <em>H5L_info_t</em> struct containing information regarding 
              that link
              </td></tr>
<!-- NEW PAGE -->
          <tr valign=top><td><code>&nbsp;&nbsp;&nbsp;&nbsp;</code></td><td>
              <code>op_data&nbsp;&nbsp;&nbsp;&nbsp;</code>
              </td><td>
              User-defined pointer to data required by the application 
              in processing the link;
              a pass-through of the <code>op_data</code> pointer provided
              with the <code>H5Lvisit</code> function call
              </td></tr>
      </table>
      <p>
      The <em>H5L_info_t</em> struct is defined (in <code>H5Lpublic.h</code>) 
      as follows:
<pre>
    typedef struct {
        H5L_type_t     type;         /* Type of link                   */
        hbool_t        corder_valid; /* Indicates whether creation     */
                                     /* order is valid                 */
        int64_t        corder;       /* Creation order                 */
        H5T_cset_t     cset;         /* Character set of link name     */
        union {
            haddr_t    address;      /* Address hard link points to    */
            size_t     val_size;     /* Size of soft link or           */
                                     /* user-defined link value        */
        } u;
    } H5L_info_t;
</pre>

      <p>
      The possible return values from the callback function,
      and the effect of each, are as follows:
      <ul>
          <li>Zero causes the visit iterator to continue, returning 
              zero when all group members have been processed.
          <li>A positive value causes the visit iterator to immediately 
              return that positive value, indicating short-circuit success.  
          <li>A negative value causes the visit iterator to immediately 
              return that value, indicating failure.  
      </ul>


      <p>
      The <code>H5Lvisit</code> <code>op_data</code> parameter is a 
      user-defined pointer to the data required to process links 
      in the course of the iteration.
      This pointer is passed back to each step of the iteration in the 
      <code>op</code> callback function&rsquo;s <code>op_data</code> parameter.

      <br>&nbsp;
      <p>
      <code>H5Lvisit</code> and 
      <a href="RM_H5O.html#Object-Visit"><code>H5Ovisit</code></a> 
      are companion functions:
      one for examining and operating on links; 
      the other for examining and operating on the objects that 
      those links point to.
      Both functions ensure that by the time the function completes
      successfully, every link or object below the specified point in the 
      file has been presented to the application for whatever 
      processing the application requires.


  <p>
  <dt><strong>Programming Note for C++ Developers Using C Functions:</strong>
    <dd>
      <p>If a C routine that takes a function pointer as an argument is 
      called from within C++ code, the C routine should be returned from 
      normally. </p>

      <p>Examples of this kind of routine include callbacks such as 
      <code>H5Pset_elink_cb</code> and <code>H5Pset_type_conv_cb</code> 
      and functions such as <code>H5Tconvert</code> and 
      <code>H5Ewalk2</code>.</p>

      <p>Exiting the routine in its normal fashion allows the HDF5 C 
      Library to clean up its work properly. In other words, if the C++ 
      application jumps out of the routine back to the C++ 
      &ldquo;catch&rdquo; statement, the library is not given the 
      opportunity to close any temporary data structures that were set 
      up when the routine was called. The C++ application should save 
      some state as the routine is started so that any problem that 
      occurs might be diagnosed.</p>



      
  <p>
  <dt><strong>Parameters:</strong>
    <dd><table>
      <tr>
        <td valign="top">
            <em>hid_t</em> <code>group_id</code>
        </td>
        <td valign="top">IN: Identifier of the group at which the 
            recursive iteration begins.
        </td></tr>
      <tr>
        <td valign="top">
            <em>H5_index_t</em> <code>index_type</code> 
        </td>
        <td valign="top">IN: Type of index; valid values include:
            <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <code>H5_INDEX_NAME</code>
            <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <code>H5_INDEX_CRT_ORDER</code>
        </td></tr>
      <tr>
        <td valign="top">
            <em>H5_iter_order_t</em>&nbsp;<code>order&nbsp;&nbsp;&nbsp;&nbsp;</code> 
        </td>
        <td valign="top">IN: Order in which index is traversed; 
            valid values include:
            <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <code>H5_ITER_DEC</code>
            <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <code>H5_ITER_INC</code>
            <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <code>H5_ITER_NATIVE</code>
        </td></tr>
      <tr>
        <td valign="top">
            <em>H5L_iterate_t</em> <code>op</code>
        </td>
        <td valign="top">IN: Callback function passing data regarding 
            the link to the calling application
        </td></tr>
      <tr>
        <td valign="top">
            <em>void *</em><code>op_data</code>
        </td>
        <td valign="top">IN: User-defined pointer to data required 
            by the application for its processing of the link
        </td></tr>
    </table>

<!-- NEW PAGE -->

  <p>
  <dt><strong>Returns:</strong>
    <dd>On success, returns the return value of the first operator that
        returns a positive value, or zero if all members were processed 
        with no operator returning non-zero.
        <p>
        On failure, returns a negative value if something goes wrong within 
        the library, or the first negative value returned by an operator.
  <p>
  <dt><strong>Fortran90 Interface:</strong> <!-- h5lfunc_f -->
    <dd>None.
<!--
    <pre>
  
    </pre>
-->
  <p>
  <dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>C</strong></td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">
            Function introduced in this release.</td></tr>
    </table>
</dl>




<!--
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Copyright by The HDF Group.                                               *
  * Copyright by the Board of Trustees of the University of Illinois.         *
  * All rights reserved.                                                      *
  *                                                                           *
  * This file is part of HDF5.  The full HDF5 copyright notice, including     *
  * terms governing use, modification, and redistribution, is contained in    *
  * the files COPYING and Copyright.html.  COPYING can be found at the root   *
  * of the source code distribution tree; Copyright.html can be found at the  *
  * root level of an installed copy of the electronic HDF5 document set and   *
  * is linked from the top-level documents page.  It can also be found at     *
  * http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have          *
  * access to either file, you may request a copy from help@hdfgroup.org.     *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 -->


<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Lvisit_by_name" -->
<hr>
<dl>

  <dt><div align=right><font color=999999 size=-1><i>
      Last modified: 24 August 2012
      </i></font></div>


  <dt><strong>Name:</strong> <a name="Link-VisitByName">H5Lvisit_by_name</a>
  <dt><strong>Signature:</strong>
    <dd><em>herr_t</em> <code>H5Lvisit_by_name</code>(
            <em>hid_t</em> <code>loc_id</code>,
            <em>const char *</em><code>group_name</code>,
            <em>H5_index_t</em> <code>index_type</code>, 
            <em>H5_iter_order_t</em> <code>order</code>, 
            <em>H5L_iterate_t</em> <code>op</code>,
            <em>void *</em><code>op_data</code>,
            <em>hid_t</em> <code>lapl_id</code>
        )
  <p>
  <dt><strong>Purpose:</strong>
    <dd>Recursively visits all links starting from a specified group.
  <p>
  <dt><strong>Description:</strong>
    <dd><code>H5Lvisit_by_name</code> is a recursive iteration function 
      to visit all links in and below a group in an HDF5 file,
      thus providing a mechanism for an application to perform
      a common set of operations across all of those links 
      or a dynamically selected subset.
      For non-recursive iteration across the members of a group, 
      see <a href="#Link-Iterate"><code>H5Literate</code></a>.
      <p>
      The group serving as the root of the iteration is specified by 
      the <code>loc_id</code> / <code>group_name</code> parameter pair.
      <code>loc_id</code> specifies a file or group;
      <code>group_name</code> specifies either 
      a group in the file (with an absolute name based in the 
      file&rsquo;s root group) or
      a group relative to <code>loc_id</code>.
      If <code>loc_id</code> fully specifies the group that is to 
      serve as the root of the iteration, <code>group_name</code> should
      be <code>'.'</code> (a dot).
      (Note that when <code>loc_id</code> fully specifies the the 
      group that is to serve as the root of the iteration, 
      the user may wish to consider using 
      <a href="#Link-Visit"><code>H5Lvisit</code></a> 
      instead of <code>H5Lvisit_by_name</code>.)
      <p>
      Two parameters are used to establish the iteration:
      <code>index_type</code> and <code>order</code>.
      <p>
      <code>index_type</code> specifies the index to be used.
      If the links have not been indexed by the index type, they will first
      be sorted by that index then the iteration will begin; 
      if the links have been so indexed, the sorting step will be 
      unnecesary, so the iteration may begin more quickly.
      Valid values include the following:
        <table border=0>
          <tr><td>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_INDEX_NAME</code>
            </td><td valign=top>
            Alpha-numeric index on name 
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_INDEX_CRT_ORDER&nbsp;&nbsp;&nbsp;&nbsp;</code>
            </td><td valign=top>
            Index on creation order 
          <!-- H5_INDEX_N is used internally by the Library -->
          <!--
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_INDEX_N</code>
            </td><td valign=top>
            Number of indices defined
          -->
          </td></tr>
        </table>
      <p>
      Note that the index type passed in <code>index_type</code> is a 
      <i>best effort</i> setting.  
      If the application passes in a value indicating iteration in 
      creation order and a group is encountered that was not tracked
      in creation order, that group will be iterated over in 
      alpha-numeric order by name, or <i>name order</i>.
      (<i>Name order</i> is the native order used by the HDF5 Library
      and is always available.)
      <p>
      <code>order</code> specifies the order in which objects are to be
      inspected along the index specified in <code>index_type</code>.  
      Valid values include the following:
        <table border=0>
          <tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_ITER_INC</code>
            </td><td valign=top>
            Increasing order 
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_ITER_DEC</code>
            </td><td valign=top>
            Decreasing order
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_ITER_NATIVE&nbsp;&nbsp;&nbsp;&nbsp;</code>
            </td><td valign=top>
            Fastest available order
          <!-- H5_INDEX_N is used internally by the Library -->
          <!--
          </td></tr><tr><td valign=top>
            &nbsp;&nbsp;&nbsp;&nbsp;
            </td><td valign=top>
            <code>H5_ITER_N</code>
            </td><td valign=top>
            Number of iteration orders defined 
          -->
          </td></tr>
        </table>

      <p>
      The <code>op</code> callback funtion, 
      the related <i>H5L_info_t</i> struct, 
      and the effect that the callback function&rsquo;s return value has 
      on the application are described in
      <a href="#Link-Visit"><code>H5Lvisit</code></a>.
      <p>
<!--
      The protoype of the callback function <code>op</code> is as follows
      (as defined in the source code file <code>H5Lpublic.h</code>):
      <dir>
          <em>herr_t</em> <code>(*H5L_iterate_t)(</code>
              <em>hid_t</em> <code>g_id,</code> 
              <em>const char *</em><code>name,</code> 
              <em>const H5L_info_t *</em><code>info,</code> 
              <em>void *</em><code>op_data)</code>
      </dir>
-->

<!-- NEW PAGE -->

<!--
      <p>
      The parameters of this callback function have the following
      values or meanings: 
      <table>
          <tr valign=top><td><code>&nbsp;&nbsp;&nbsp;&nbsp;</code></td><td>
              <code>g_id</code>
              </td><td>
              Group that serves as root of the iteration,
              i.e., identifier of the group specified by the
              <code>H5Lvisit_by_name</code> <code>loc_id</code> /
              <code>group_name</code> parameter pair
              </td></tr>
          <tr valign=top><td><code>&nbsp;&nbsp;&nbsp;&nbsp;</code></td><td>
              <code>name</code>
              </td><td>
              Name of link, relative to <code>g_id</code>,
              being examined at current step of the iteration
              </td></tr>
          <tr valign=top><td><code>&nbsp;&nbsp;&nbsp;&nbsp;</code></td><td>
              <code>info</code>
              </td><td>
              <em>H5L_info_t</em> struct containing information regarding 
              that link
              </td></tr>
          <tr valign=top><td><code>&nbsp;&nbsp;&nbsp;&nbsp;</code></td><td>
              <code>op_data&nbsp;&nbsp;&nbsp;&nbsp;</code>
              </td><td>
              User-defined pointer to data required by the application 
              in processing the link;
              a pass-through of the <code>op_data</code> pointer provided
              with the <code>H5Lvisit_by_name</code> function call
              </td></tr>
      </table>
      <p>
      The <em>H5L_info_t</em> struct is defined (in <code>H5Lpublic.h</code>) 
      as follows:
<pre>
    typedef struct {
        H5L_type_t     type;         /* Type of link                   */
        hbool_t        corder_valid; /* Indicates whether creation     */
                                     /* order is valid                 */
        int64_t        corder;       /* Creation order                 */
        H5T_cset_t     cset;         /* Character set of link name     */
        union {
            haddr_t    address;      /* Address hard link points to    */
            size_t     val_size;     /* Size of soft link or           */
                                     /* user-defined link value        */
        } u;
    } H5L_info_t;
</pre>
-->

      <p>
      The <code>H5Lvisit_by_name</code> <code>op_data</code> parameter is a 
      user-defined pointer to the data required to process links 
      in the course of the iteration.
      This pointer is passed back to each step of the iteration in 
      the callback function&rsquo;s <code>op_data</code> parameter.
      <p>
      <code>lapl_id</code> is a link access property list.
      In the general case, when default link access properties are 
      acceptable, this can be passed in as <code>H5P_DEFAULT</code>.
      An example of a situation that requires a non-default link access 
      property list is when the link is an external link; an external link 
      may require that a link prefix be set in a link access property list
      (see <a href="RM_H5P.html#Property-SetELinkPrefix">
      <code>H5Pset_elink_prefix</code></a>).

      <br>&nbsp;
      <p>
      <code>H5Lvisit_by_name</code> and 
      <a href="RM_H5O.html#Object-VisitByName"><code>H5Ovisit_by_name</code></a>
      are companion functions:
      one for examining and operating on links; 
      the other for examining and operating on the objects that 
      those links point to.
      Both functions ensure that by the time the function completes
      successfully, every link or object below the specified point in the 
      file has been presented to the application for whatever 
      processing the application requires.


  <p>
  <dt><strong>Programming Note for C++ Developers Using C Functions:</strong>
    <dd>
      <p>If a C routine that takes a function pointer as an argument is 
      called from within C++ code, the C routine should be returned from 
      normally. </p>

      <p>Examples of this kind of routine include callbacks such as 
      <code>H5Pset_elink_cb</code> and <code>H5Pset_type_conv_cb</code> 
      and functions such as <code>H5Tconvert</code> and 
      <code>H5Ewalk2</code>.</p>

      <p>Exiting the routine in its normal fashion allows the HDF5 C 
      Library to clean up its work properly. In other words, if the C++ 
      application jumps out of the routine back to the C++ 
      &ldquo;catch&rdquo; statement, the library is not given the 
      opportunity to close any temporary data structures that were set 
      up when the routine was called. The C++ application should save 
      some state as the routine is started so that any problem that 
      occurs might be diagnosed.</p>



      
  <p>
  <dt><strong>Parameters:</strong>
    <dd><table>
      <tr>
        <td valign="top">
            <em>hid_t</em> <code>loc_id</code>
        </td>
        <td valign="top">IN: Identifier of a file or group 
        </td></tr>
      <tr>
        <td valign="top">
            <em>const char *</em><code>name</code>
        </td>
        <td valign="top">IN: Name of the group, 
            generally relative to <code>loc_id</code>,
            that will serve as root of the iteration
        </td></tr>
      <tr>
        <td valign="top">
            <em>H5_index_t</em> <code>index_type</code> 
        </td>
        <td valign="top">IN: Type of index; valid values include:
            <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <code>H5_INDEX_NAME</code>
            <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <code>H5_INDEX_CRT_ORDER</code>
        </td></tr>
      <tr>
        <td valign="top">
            <em>H5_iter_order_t</em>&nbsp;<code>order&nbsp;&nbsp;&nbsp;&nbsp;</code> 
        </td>
        <td valign="top">IN: Order in which index is traversed; 
            valid values include:
            <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <code>H5_ITER_DEC</code>
            <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <code>H5_ITER_INC</code>
            <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <code>H5_ITER_NATIVE</code>
        </td></tr>

      <tr>
        <td valign="top">
            <em>H5L_iterate_t</em> <code>op</code>
        </td>
        <td valign="top">IN: Callback function passing data regarding 
            the link to the calling application
        </td></tr>
      <tr>
        <td valign="top">
            <em>void *</em><code>op_data</code>
        </td>
        <td valign="top">IN: User-defined pointer to data required 
            by the application for its processing of the link
        </td></tr>
      <tr>
        <td valign="top">
            <em>hid_t</em> <code>lapl_id</code>
        </td>
        <td valign="top">IN: Link access property list identifier 
        </td></tr>
    </table>
  <p>
  <dt><strong>Returns:</strong>
    <dd>On success, returns the return value of the first operator that
        returns a positive value, or zero if all members were processed 
        with no operator returning non-zero.
        <p>
        On failure, returns a negative value if something goes wrong within 
        the library, or the first negative value returned by an operator.
  <p>
  <dt><strong>Fortran90 Interface:</strong> <!-- h5lfunc_f -->
    <dd>None.
<!--
    <pre>
  
    </pre>
-->
  <p>
  <dt><strong>History:</strong>
    <dd><table width="90%">
        <tr>
          <td valign="top" align="left" width="10%">
            <strong>Release</strong>&nbsp;&nbsp;&nbsp;&nbsp;</td>
          <td valign="top" align="left">
            <strong>C</strong></td></tr>
        <tr>
          <td valign="top">1.8.0</td>
          <td valign="top">
            Function introduced in this release.</td></tr>
    </table>
</dl>



<!-- HEADER RIGHT " " -->
<!-- #BeginLibraryItem "/ed_libs/NavBar_RM.lbi" -->
<hr>
<center>
<table border=0 width=98%>
<tr><td valign=top align=left>
<a href="../index.html">HDF5 documents and links</a>&nbsp;<br>
<a href="../H5.intro.html">Introduction to HDF5</a>&nbsp;<br>
<a href="../UG/HDF5_Users_Guide-Responsive HTML5/index.html">HDF5 User&rsquo;s Guide</a>&nbsp;<br>
<!--
<a href="Glossary.html">Glossary</a><br>
-->
</td>
<td valign=top align=right>
In the 
<a href="RM_H5Front.html">HDF5 Reference Manual</a>&nbsp;
<font size=-1>
<br>
<a href="../HL/RM_H5DS.html">H5DS</a>&nbsp;&nbsp;
<a href="../HL/RM_H5IM.html">H5IM</a>&nbsp;&nbsp;
<a href="../HL/RM_H5LT.html">H5LT</a>&nbsp;&nbsp;
<a href="../HL/RM_H5PT.html">H5PT</a>&nbsp;&nbsp;
<a href="../HL/RM_H5TB.html">H5TB</a>&nbsp;
<a href="../HL/RM_HDF5Optimized.html">Optimized</a>&nbsp;
<br>
<a href="RM_H5.html">H5</a>&nbsp;&nbsp;
<a href="RM_H5A.html">H5A</a>&nbsp;&nbsp;
<a href="RM_H5D.html">H5D</a>&nbsp;&nbsp;
<a href="RM_H5E.html">H5E</a>&nbsp;&nbsp;
<a href="RM_H5F.html">H5F</a>&nbsp;&nbsp;
<a href="RM_H5G.html">H5G</a>&nbsp;&nbsp;
<a href="RM_H5I.html">H5I</a>&nbsp;&nbsp;
<a href="RM_H5L.html">H5L</a>&nbsp;
<br>
<a href="RM_H5O.html">H5O</a>&nbsp;&nbsp;
<a href="RM_H5P.html">H5P</a>&nbsp;&nbsp;
<a href="RM_H5PL.html">H5PL</a>&nbsp;&nbsp;
<a href="RM_H5R.html">H5R</a>&nbsp;&nbsp;
<a href="RM_H5S.html">H5S</a>&nbsp;&nbsp;
<a href="RM_H5T.html">H5T</a>&nbsp;&nbsp;
<a href="RM_H5Z.html">H5Z</a>&nbsp;
<br>
<a href="Tools.html">Tools</a>&nbsp;&nbsp;
<a href="PredefDTypes.html">Datatypes</a>&nbsp;&nbsp;
<a href="../fortran/index.html">Fortran</a>&nbsp;&nbsp;
<a href="APICompatMacros.html">Compatibility Macros</a>&nbsp;
<br>
<a href="CollectiveCalls.html">Collective Calls in Parallel</a>&nbsp;
<!--
<br>
<i><font size=-1>(Printable <a href="http://hdfgroup.org/HDF5/doc/PSandPDF/HDF5_RefManual.PDF">PDF</a> of this Reference Manual)</font></i>&nbsp;
-->
</font>
</td></tr>
</table>
</center>
<hr>
<!-- #EndLibraryItem -->


<!-- INCLUDE VIA PHP FROM <doc_root>/ed_libs/Footer2.htm -->

<address>
<table width="100%" border="0">
  <tr valign="top">
      <td align="left">
          <address>
          The HDF Group Help Desk: <img src="../Graphics/help.png" align=top height=16>
          <br>
          Describes HDF5 Release 1.10.
          </address>
      </td><td width="5%">&nbsp;</td>
      <td align="right">
          <a href="https://support.hdfgroup.org/ftp/HDF5/releases/COPYING">Copyright</a> by
          <a href="https://www.hdfgroup.org">The HDF Group</a>
          <br>
          and the Board of Trustees of the University of Illinois
      </td>   
  </tr>   
</table>
</address>

<!-- END PHP INCLUDE FROM <doc_root>/ed_libs/Footer2.htm -->


<SCRIPT LANGUAGE="JAVASCRIPT">
<!--
document.writeln("Last modified: February 2017");
-->
</SCRIPT>


 
</body>
</html>

